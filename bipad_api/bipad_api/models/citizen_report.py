# coding: utf-8

"""
    BIPAD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CitizenReport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'created_on': 'datetime',
        'modified_on': 'datetime',
        'description': 'str',
        'image': 'str',
        'point': 'str',
        'comment': 'str',
        'verified': 'bool',
        'incident': 'int',
        'hazard': 'int',
        'ward': 'int'
    }

    attribute_map = {
        'id': 'id',
        'created_on': 'createdOn',
        'modified_on': 'modifiedOn',
        'description': 'description',
        'image': 'image',
        'point': 'point',
        'comment': 'comment',
        'verified': 'verified',
        'incident': 'incident',
        'hazard': 'hazard',
        'ward': 'ward'
    }

    def __init__(self, id=None, created_on=None, modified_on=None, description=None, image=None, point=None, comment=None, verified=None, incident=None, hazard=None, ward=None):  # noqa: E501
        """CitizenReport - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._created_on = None
        self._modified_on = None
        self._description = None
        self._image = None
        self._point = None
        self._comment = None
        self._verified = None
        self._incident = None
        self._hazard = None
        self._ward = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if created_on is not None:
            self.created_on = created_on
        if modified_on is not None:
            self.modified_on = modified_on
        if description is not None:
            self.description = description
        if image is not None:
            self.image = image
        if point is not None:
            self.point = point
        if comment is not None:
            self.comment = comment
        if verified is not None:
            self.verified = verified
        if incident is not None:
            self.incident = incident
        self.hazard = hazard
        self.ward = ward

    @property
    def id(self):
        """Gets the id of this CitizenReport.  # noqa: E501


        :return: The id of this CitizenReport.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CitizenReport.


        :param id: The id of this CitizenReport.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def created_on(self):
        """Gets the created_on of this CitizenReport.  # noqa: E501


        :return: The created_on of this CitizenReport.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this CitizenReport.


        :param created_on: The created_on of this CitizenReport.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def modified_on(self):
        """Gets the modified_on of this CitizenReport.  # noqa: E501


        :return: The modified_on of this CitizenReport.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_on

    @modified_on.setter
    def modified_on(self, modified_on):
        """Sets the modified_on of this CitizenReport.


        :param modified_on: The modified_on of this CitizenReport.  # noqa: E501
        :type: datetime
        """

        self._modified_on = modified_on

    @property
    def description(self):
        """Gets the description of this CitizenReport.  # noqa: E501


        :return: The description of this CitizenReport.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CitizenReport.


        :param description: The description of this CitizenReport.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def image(self):
        """Gets the image of this CitizenReport.  # noqa: E501


        :return: The image of this CitizenReport.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this CitizenReport.


        :param image: The image of this CitizenReport.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def point(self):
        """Gets the point of this CitizenReport.  # noqa: E501


        :return: The point of this CitizenReport.  # noqa: E501
        :rtype: str
        """
        return self._point

    @point.setter
    def point(self, point):
        """Sets the point of this CitizenReport.


        :param point: The point of this CitizenReport.  # noqa: E501
        :type: str
        """

        self._point = point

    @property
    def comment(self):
        """Gets the comment of this CitizenReport.  # noqa: E501


        :return: The comment of this CitizenReport.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this CitizenReport.


        :param comment: The comment of this CitizenReport.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def verified(self):
        """Gets the verified of this CitizenReport.  # noqa: E501


        :return: The verified of this CitizenReport.  # noqa: E501
        :rtype: bool
        """
        return self._verified

    @verified.setter
    def verified(self, verified):
        """Sets the verified of this CitizenReport.


        :param verified: The verified of this CitizenReport.  # noqa: E501
        :type: bool
        """

        self._verified = verified

    @property
    def incident(self):
        """Gets the incident of this CitizenReport.  # noqa: E501


        :return: The incident of this CitizenReport.  # noqa: E501
        :rtype: int
        """
        return self._incident

    @incident.setter
    def incident(self, incident):
        """Sets the incident of this CitizenReport.


        :param incident: The incident of this CitizenReport.  # noqa: E501
        :type: int
        """

        self._incident = incident

    @property
    def hazard(self):
        """Gets the hazard of this CitizenReport.  # noqa: E501


        :return: The hazard of this CitizenReport.  # noqa: E501
        :rtype: int
        """
        return self._hazard

    @hazard.setter
    def hazard(self, hazard):
        """Sets the hazard of this CitizenReport.


        :param hazard: The hazard of this CitizenReport.  # noqa: E501
        :type: int
        """
        if hazard is None:
            raise ValueError("Invalid value for `hazard`, must not be `None`")  # noqa: E501

        self._hazard = hazard

    @property
    def ward(self):
        """Gets the ward of this CitizenReport.  # noqa: E501


        :return: The ward of this CitizenReport.  # noqa: E501
        :rtype: int
        """
        return self._ward

    @ward.setter
    def ward(self, ward):
        """Sets the ward of this CitizenReport.


        :param ward: The ward of this CitizenReport.  # noqa: E501
        :type: int
        """
        if ward is None:
            raise ValueError("Invalid value for `ward`, must not be `None`")  # noqa: E501

        self._ward = ward

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CitizenReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CitizenReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
