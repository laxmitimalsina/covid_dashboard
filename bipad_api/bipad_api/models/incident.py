# coding: utf-8

"""
    BIPAD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Incident(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'title': 'str',
        'wards': 'list[int]',
        'point': 'str',
        'created_on': 'datetime',
        'modified_on': 'datetime',
        'description': 'str',
        'cause': 'str',
        'verified': 'bool',
        'verification_message': 'str',
        'approved': 'bool',
        'polygon': 'str',
        'incident_on': 'datetime',
        'reported_on': 'datetime',
        'street_address': 'str',
        'detail': 'str',
        'need_followup': 'bool',
        'region': 'str',
        'region_id': 'int',
        'source': 'str',
        'event': 'int',
        'hazard': 'int',
        'loss': 'int',
        'created_by': 'int',
        'updated_by': 'int'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'wards': 'wards',
        'point': 'point',
        'created_on': 'createdOn',
        'modified_on': 'modifiedOn',
        'description': 'description',
        'cause': 'cause',
        'verified': 'verified',
        'verification_message': 'verificationMessage',
        'approved': 'approved',
        'polygon': 'polygon',
        'incident_on': 'incidentOn',
        'reported_on': 'reportedOn',
        'street_address': 'streetAddress',
        'detail': 'detail',
        'need_followup': 'needFollowup',
        'region': 'region',
        'region_id': 'regionId',
        'source': 'source',
        'event': 'event',
        'hazard': 'hazard',
        'loss': 'loss',
        'created_by': 'createdBy',
        'updated_by': 'updatedBy'
    }

    def __init__(self, id=None, title=None, wards=None, point=None, created_on=None, modified_on=None, description=None, cause=None, verified=None, verification_message=None, approved=None, polygon=None, incident_on=None, reported_on=None, street_address=None, detail=None, need_followup=None, region=None, region_id=None, source=None, event=None, hazard=None, loss=None, created_by=None, updated_by=None):  # noqa: E501
        """Incident - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._title = None
        self._wards = None
        self._point = None
        self._created_on = None
        self._modified_on = None
        self._description = None
        self._cause = None
        self._verified = None
        self._verification_message = None
        self._approved = None
        self._polygon = None
        self._incident_on = None
        self._reported_on = None
        self._street_address = None
        self._detail = None
        self._need_followup = None
        self._region = None
        self._region_id = None
        self._source = None
        self._event = None
        self._hazard = None
        self._loss = None
        self._created_by = None
        self._updated_by = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if title is not None:
            self.title = title
        self.wards = wards
        self.point = point
        if created_on is not None:
            self.created_on = created_on
        if modified_on is not None:
            self.modified_on = modified_on
        if description is not None:
            self.description = description
        if cause is not None:
            self.cause = cause
        if verified is not None:
            self.verified = verified
        if verification_message is not None:
            self.verification_message = verification_message
        if approved is not None:
            self.approved = approved
        if polygon is not None:
            self.polygon = polygon
        self.incident_on = incident_on
        if reported_on is not None:
            self.reported_on = reported_on
        if street_address is not None:
            self.street_address = street_address
        if detail is not None:
            self.detail = detail
        if need_followup is not None:
            self.need_followup = need_followup
        if region is not None:
            self.region = region
        if region_id is not None:
            self.region_id = region_id
        self.source = source
        if event is not None:
            self.event = event
        self.hazard = hazard
        if loss is not None:
            self.loss = loss
        if created_by is not None:
            self.created_by = created_by
        if updated_by is not None:
            self.updated_by = updated_by

    @property
    def id(self):
        """Gets the id of this Incident.  # noqa: E501


        :return: The id of this Incident.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Incident.


        :param id: The id of this Incident.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this Incident.  # noqa: E501


        :return: The title of this Incident.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Incident.


        :param title: The title of this Incident.  # noqa: E501
        :type: str
        """
        if title is not None and len(title) < 1:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")  # noqa: E501

        self._title = title

    @property
    def wards(self):
        """Gets the wards of this Incident.  # noqa: E501


        :return: The wards of this Incident.  # noqa: E501
        :rtype: list[int]
        """
        return self._wards

    @wards.setter
    def wards(self, wards):
        """Sets the wards of this Incident.


        :param wards: The wards of this Incident.  # noqa: E501
        :type: list[int]
        """
        if wards is None:
            raise ValueError("Invalid value for `wards`, must not be `None`")  # noqa: E501

        self._wards = wards

    @property
    def point(self):
        """Gets the point of this Incident.  # noqa: E501


        :return: The point of this Incident.  # noqa: E501
        :rtype: str
        """
        return self._point

    @point.setter
    def point(self, point):
        """Sets the point of this Incident.


        :param point: The point of this Incident.  # noqa: E501
        :type: str
        """
        if point is None:
            raise ValueError("Invalid value for `point`, must not be `None`")  # noqa: E501

        self._point = point

    @property
    def created_on(self):
        """Gets the created_on of this Incident.  # noqa: E501


        :return: The created_on of this Incident.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this Incident.


        :param created_on: The created_on of this Incident.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def modified_on(self):
        """Gets the modified_on of this Incident.  # noqa: E501


        :return: The modified_on of this Incident.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_on

    @modified_on.setter
    def modified_on(self, modified_on):
        """Sets the modified_on of this Incident.


        :param modified_on: The modified_on of this Incident.  # noqa: E501
        :type: datetime
        """

        self._modified_on = modified_on

    @property
    def description(self):
        """Gets the description of this Incident.  # noqa: E501


        :return: The description of this Incident.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Incident.


        :param description: The description of this Incident.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def cause(self):
        """Gets the cause of this Incident.  # noqa: E501


        :return: The cause of this Incident.  # noqa: E501
        :rtype: str
        """
        return self._cause

    @cause.setter
    def cause(self, cause):
        """Sets the cause of this Incident.


        :param cause: The cause of this Incident.  # noqa: E501
        :type: str
        """

        self._cause = cause

    @property
    def verified(self):
        """Gets the verified of this Incident.  # noqa: E501


        :return: The verified of this Incident.  # noqa: E501
        :rtype: bool
        """
        return self._verified

    @verified.setter
    def verified(self, verified):
        """Sets the verified of this Incident.


        :param verified: The verified of this Incident.  # noqa: E501
        :type: bool
        """

        self._verified = verified

    @property
    def verification_message(self):
        """Gets the verification_message of this Incident.  # noqa: E501


        :return: The verification_message of this Incident.  # noqa: E501
        :rtype: str
        """
        return self._verification_message

    @verification_message.setter
    def verification_message(self, verification_message):
        """Sets the verification_message of this Incident.


        :param verification_message: The verification_message of this Incident.  # noqa: E501
        :type: str
        """

        self._verification_message = verification_message

    @property
    def approved(self):
        """Gets the approved of this Incident.  # noqa: E501


        :return: The approved of this Incident.  # noqa: E501
        :rtype: bool
        """
        return self._approved

    @approved.setter
    def approved(self, approved):
        """Sets the approved of this Incident.


        :param approved: The approved of this Incident.  # noqa: E501
        :type: bool
        """

        self._approved = approved

    @property
    def polygon(self):
        """Gets the polygon of this Incident.  # noqa: E501


        :return: The polygon of this Incident.  # noqa: E501
        :rtype: str
        """
        return self._polygon

    @polygon.setter
    def polygon(self, polygon):
        """Sets the polygon of this Incident.


        :param polygon: The polygon of this Incident.  # noqa: E501
        :type: str
        """

        self._polygon = polygon

    @property
    def incident_on(self):
        """Gets the incident_on of this Incident.  # noqa: E501


        :return: The incident_on of this Incident.  # noqa: E501
        :rtype: datetime
        """
        return self._incident_on

    @incident_on.setter
    def incident_on(self, incident_on):
        """Sets the incident_on of this Incident.


        :param incident_on: The incident_on of this Incident.  # noqa: E501
        :type: datetime
        """
        if incident_on is None:
            raise ValueError("Invalid value for `incident_on`, must not be `None`")  # noqa: E501

        self._incident_on = incident_on

    @property
    def reported_on(self):
        """Gets the reported_on of this Incident.  # noqa: E501


        :return: The reported_on of this Incident.  # noqa: E501
        :rtype: datetime
        """
        return self._reported_on

    @reported_on.setter
    def reported_on(self, reported_on):
        """Sets the reported_on of this Incident.


        :param reported_on: The reported_on of this Incident.  # noqa: E501
        :type: datetime
        """

        self._reported_on = reported_on

    @property
    def street_address(self):
        """Gets the street_address of this Incident.  # noqa: E501


        :return: The street_address of this Incident.  # noqa: E501
        :rtype: str
        """
        return self._street_address

    @street_address.setter
    def street_address(self, street_address):
        """Sets the street_address of this Incident.


        :param street_address: The street_address of this Incident.  # noqa: E501
        :type: str
        """
        if street_address is not None and len(street_address) > 255:
            raise ValueError("Invalid value for `street_address`, length must be less than or equal to `255`")  # noqa: E501

        self._street_address = street_address

    @property
    def detail(self):
        """Gets the detail of this Incident.  # noqa: E501


        :return: The detail of this Incident.  # noqa: E501
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this Incident.


        :param detail: The detail of this Incident.  # noqa: E501
        :type: str
        """

        self._detail = detail

    @property
    def need_followup(self):
        """Gets the need_followup of this Incident.  # noqa: E501


        :return: The need_followup of this Incident.  # noqa: E501
        :rtype: bool
        """
        return self._need_followup

    @need_followup.setter
    def need_followup(self, need_followup):
        """Sets the need_followup of this Incident.


        :param need_followup: The need_followup of this Incident.  # noqa: E501
        :type: bool
        """

        self._need_followup = need_followup

    @property
    def region(self):
        """Gets the region of this Incident.  # noqa: E501


        :return: The region of this Incident.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Incident.


        :param region: The region of this Incident.  # noqa: E501
        :type: str
        """
        if region is not None and len(region) > 25:
            raise ValueError("Invalid value for `region`, length must be less than or equal to `25`")  # noqa: E501

        self._region = region

    @property
    def region_id(self):
        """Gets the region_id of this Incident.  # noqa: E501


        :return: The region_id of this Incident.  # noqa: E501
        :rtype: int
        """
        return self._region_id

    @region_id.setter
    def region_id(self, region_id):
        """Sets the region_id of this Incident.


        :param region_id: The region_id of this Incident.  # noqa: E501
        :type: int
        """
        if region_id is not None and region_id > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `region_id`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if region_id is not None and region_id < -2147483648:  # noqa: E501
            raise ValueError("Invalid value for `region_id`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._region_id = region_id

    @property
    def source(self):
        """Gets the source of this Incident.  # noqa: E501


        :return: The source of this Incident.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Incident.


        :param source: The source of this Incident.  # noqa: E501
        :type: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def event(self):
        """Gets the event of this Incident.  # noqa: E501


        :return: The event of this Incident.  # noqa: E501
        :rtype: int
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this Incident.


        :param event: The event of this Incident.  # noqa: E501
        :type: int
        """

        self._event = event

    @property
    def hazard(self):
        """Gets the hazard of this Incident.  # noqa: E501


        :return: The hazard of this Incident.  # noqa: E501
        :rtype: int
        """
        return self._hazard

    @hazard.setter
    def hazard(self, hazard):
        """Sets the hazard of this Incident.


        :param hazard: The hazard of this Incident.  # noqa: E501
        :type: int
        """
        if hazard is None:
            raise ValueError("Invalid value for `hazard`, must not be `None`")  # noqa: E501

        self._hazard = hazard

    @property
    def loss(self):
        """Gets the loss of this Incident.  # noqa: E501


        :return: The loss of this Incident.  # noqa: E501
        :rtype: int
        """
        return self._loss

    @loss.setter
    def loss(self, loss):
        """Sets the loss of this Incident.


        :param loss: The loss of this Incident.  # noqa: E501
        :type: int
        """

        self._loss = loss

    @property
    def created_by(self):
        """Gets the created_by of this Incident.  # noqa: E501


        :return: The created_by of this Incident.  # noqa: E501
        :rtype: int
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Incident.


        :param created_by: The created_by of this Incident.  # noqa: E501
        :type: int
        """

        self._created_by = created_by

    @property
    def updated_by(self):
        """Gets the updated_by of this Incident.  # noqa: E501


        :return: The updated_by of this Incident.  # noqa: E501
        :rtype: int
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this Incident.


        :param updated_by: The updated_by of this Incident.  # noqa: E501
        :type: int
        """

        self._updated_by = updated_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Incident, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Incident):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
