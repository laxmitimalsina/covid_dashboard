# coding: utf-8

"""
    BIPAD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class IncidentFeedback(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'created_on': 'datetime',
        'modified_on': 'datetime',
        'name': 'str',
        'email': 'str',
        'mobile_number': 'str',
        'comment': 'str',
        'acknowledged': 'bool',
        'acknowledged_message': 'str',
        'incident': 'int'
    }

    attribute_map = {
        'id': 'id',
        'created_on': 'createdOn',
        'modified_on': 'modifiedOn',
        'name': 'name',
        'email': 'email',
        'mobile_number': 'mobileNumber',
        'comment': 'comment',
        'acknowledged': 'acknowledged',
        'acknowledged_message': 'acknowledgedMessage',
        'incident': 'incident'
    }

    def __init__(self, id=None, created_on=None, modified_on=None, name=None, email=None, mobile_number=None, comment=None, acknowledged=None, acknowledged_message=None, incident=None):  # noqa: E501
        """IncidentFeedback - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._created_on = None
        self._modified_on = None
        self._name = None
        self._email = None
        self._mobile_number = None
        self._comment = None
        self._acknowledged = None
        self._acknowledged_message = None
        self._incident = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if created_on is not None:
            self.created_on = created_on
        if modified_on is not None:
            self.modified_on = modified_on
        self.name = name
        if email is not None:
            self.email = email
        self.mobile_number = mobile_number
        self.comment = comment
        if acknowledged is not None:
            self.acknowledged = acknowledged
        if acknowledged_message is not None:
            self.acknowledged_message = acknowledged_message
        self.incident = incident

    @property
    def id(self):
        """Gets the id of this IncidentFeedback.  # noqa: E501


        :return: The id of this IncidentFeedback.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IncidentFeedback.


        :param id: The id of this IncidentFeedback.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def created_on(self):
        """Gets the created_on of this IncidentFeedback.  # noqa: E501


        :return: The created_on of this IncidentFeedback.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this IncidentFeedback.


        :param created_on: The created_on of this IncidentFeedback.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def modified_on(self):
        """Gets the modified_on of this IncidentFeedback.  # noqa: E501


        :return: The modified_on of this IncidentFeedback.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_on

    @modified_on.setter
    def modified_on(self, modified_on):
        """Sets the modified_on of this IncidentFeedback.


        :param modified_on: The modified_on of this IncidentFeedback.  # noqa: E501
        :type: datetime
        """

        self._modified_on = modified_on

    @property
    def name(self):
        """Gets the name of this IncidentFeedback.  # noqa: E501


        :return: The name of this IncidentFeedback.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IncidentFeedback.


        :param name: The name of this IncidentFeedback.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def email(self):
        """Gets the email of this IncidentFeedback.  # noqa: E501


        :return: The email of this IncidentFeedback.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this IncidentFeedback.


        :param email: The email of this IncidentFeedback.  # noqa: E501
        :type: str
        """
        if email is not None and len(email) > 254:
            raise ValueError("Invalid value for `email`, length must be less than or equal to `254`")  # noqa: E501

        self._email = email

    @property
    def mobile_number(self):
        """Gets the mobile_number of this IncidentFeedback.  # noqa: E501


        :return: The mobile_number of this IncidentFeedback.  # noqa: E501
        :rtype: str
        """
        return self._mobile_number

    @mobile_number.setter
    def mobile_number(self, mobile_number):
        """Sets the mobile_number of this IncidentFeedback.


        :param mobile_number: The mobile_number of this IncidentFeedback.  # noqa: E501
        :type: str
        """
        if mobile_number is None:
            raise ValueError("Invalid value for `mobile_number`, must not be `None`")  # noqa: E501
        if mobile_number is not None and len(mobile_number) > 17:
            raise ValueError("Invalid value for `mobile_number`, length must be less than or equal to `17`")  # noqa: E501
        if mobile_number is not None and len(mobile_number) < 1:
            raise ValueError("Invalid value for `mobile_number`, length must be greater than or equal to `1`")  # noqa: E501

        self._mobile_number = mobile_number

    @property
    def comment(self):
        """Gets the comment of this IncidentFeedback.  # noqa: E501


        :return: The comment of this IncidentFeedback.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this IncidentFeedback.


        :param comment: The comment of this IncidentFeedback.  # noqa: E501
        :type: str
        """
        if comment is None:
            raise ValueError("Invalid value for `comment`, must not be `None`")  # noqa: E501
        if comment is not None and len(comment) < 1:
            raise ValueError("Invalid value for `comment`, length must be greater than or equal to `1`")  # noqa: E501

        self._comment = comment

    @property
    def acknowledged(self):
        """Gets the acknowledged of this IncidentFeedback.  # noqa: E501


        :return: The acknowledged of this IncidentFeedback.  # noqa: E501
        :rtype: bool
        """
        return self._acknowledged

    @acknowledged.setter
    def acknowledged(self, acknowledged):
        """Sets the acknowledged of this IncidentFeedback.


        :param acknowledged: The acknowledged of this IncidentFeedback.  # noqa: E501
        :type: bool
        """

        self._acknowledged = acknowledged

    @property
    def acknowledged_message(self):
        """Gets the acknowledged_message of this IncidentFeedback.  # noqa: E501


        :return: The acknowledged_message of this IncidentFeedback.  # noqa: E501
        :rtype: str
        """
        return self._acknowledged_message

    @acknowledged_message.setter
    def acknowledged_message(self, acknowledged_message):
        """Sets the acknowledged_message of this IncidentFeedback.


        :param acknowledged_message: The acknowledged_message of this IncidentFeedback.  # noqa: E501
        :type: str
        """

        self._acknowledged_message = acknowledged_message

    @property
    def incident(self):
        """Gets the incident of this IncidentFeedback.  # noqa: E501


        :return: The incident of this IncidentFeedback.  # noqa: E501
        :rtype: int
        """
        return self._incident

    @incident.setter
    def incident(self, incident):
        """Sets the incident of this IncidentFeedback.


        :param incident: The incident of this IncidentFeedback.  # noqa: E501
        :type: int
        """
        if incident is None:
            raise ValueError("Invalid value for `incident`, must not be `None`")  # noqa: E501

        self._incident = incident

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IncidentFeedback, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IncidentFeedback):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
