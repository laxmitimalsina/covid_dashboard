# coding: utf-8

"""
    BIPAD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Event(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'point': 'str',
        'geojson': 'str',
        'created_on': 'datetime',
        'title': 'str',
        'description': 'str',
        'polygon': 'str',
        'started_on': 'datetime',
        'ended_on': 'datetime',
        'severity': 'str',
        'created_by': 'int',
        'updated_by': 'int',
        'hazard': 'int'
    }

    attribute_map = {
        'id': 'id',
        'point': 'point',
        'geojson': 'geojson',
        'created_on': 'createdOn',
        'title': 'title',
        'description': 'description',
        'polygon': 'polygon',
        'started_on': 'startedOn',
        'ended_on': 'endedOn',
        'severity': 'severity',
        'created_by': 'createdBy',
        'updated_by': 'updatedBy',
        'hazard': 'hazard'
    }

    def __init__(self, id=None, point=None, geojson=None, created_on=None, title=None, description=None, polygon=None, started_on=None, ended_on=None, severity=None, created_by=None, updated_by=None, hazard=None):  # noqa: E501
        """Event - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._point = None
        self._geojson = None
        self._created_on = None
        self._title = None
        self._description = None
        self._polygon = None
        self._started_on = None
        self._ended_on = None
        self._severity = None
        self._created_by = None
        self._updated_by = None
        self._hazard = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.point = point
        if geojson is not None:
            self.geojson = geojson
        if created_on is not None:
            self.created_on = created_on
        self.title = title
        if description is not None:
            self.description = description
        if polygon is not None:
            self.polygon = polygon
        if started_on is not None:
            self.started_on = started_on
        if ended_on is not None:
            self.ended_on = ended_on
        if severity is not None:
            self.severity = severity
        if created_by is not None:
            self.created_by = created_by
        if updated_by is not None:
            self.updated_by = updated_by
        if hazard is not None:
            self.hazard = hazard

    @property
    def id(self):
        """Gets the id of this Event.  # noqa: E501


        :return: The id of this Event.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Event.


        :param id: The id of this Event.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def point(self):
        """Gets the point of this Event.  # noqa: E501


        :return: The point of this Event.  # noqa: E501
        :rtype: str
        """
        return self._point

    @point.setter
    def point(self, point):
        """Sets the point of this Event.


        :param point: The point of this Event.  # noqa: E501
        :type: str
        """
        if point is None:
            raise ValueError("Invalid value for `point`, must not be `None`")  # noqa: E501

        self._point = point

    @property
    def geojson(self):
        """Gets the geojson of this Event.  # noqa: E501


        :return: The geojson of this Event.  # noqa: E501
        :rtype: str
        """
        return self._geojson

    @geojson.setter
    def geojson(self, geojson):
        """Sets the geojson of this Event.


        :param geojson: The geojson of this Event.  # noqa: E501
        :type: str
        """

        self._geojson = geojson

    @property
    def created_on(self):
        """Gets the created_on of this Event.  # noqa: E501


        :return: The created_on of this Event.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this Event.


        :param created_on: The created_on of this Event.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def title(self):
        """Gets the title of this Event.  # noqa: E501


        :return: The title of this Event.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Event.


        :param title: The title of this Event.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501
        if title is not None and len(title) > 255:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `255`")  # noqa: E501
        if title is not None and len(title) < 1:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")  # noqa: E501

        self._title = title

    @property
    def description(self):
        """Gets the description of this Event.  # noqa: E501


        :return: The description of this Event.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Event.


        :param description: The description of this Event.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def polygon(self):
        """Gets the polygon of this Event.  # noqa: E501


        :return: The polygon of this Event.  # noqa: E501
        :rtype: str
        """
        return self._polygon

    @polygon.setter
    def polygon(self, polygon):
        """Sets the polygon of this Event.


        :param polygon: The polygon of this Event.  # noqa: E501
        :type: str
        """

        self._polygon = polygon

    @property
    def started_on(self):
        """Gets the started_on of this Event.  # noqa: E501


        :return: The started_on of this Event.  # noqa: E501
        :rtype: datetime
        """
        return self._started_on

    @started_on.setter
    def started_on(self, started_on):
        """Sets the started_on of this Event.


        :param started_on: The started_on of this Event.  # noqa: E501
        :type: datetime
        """

        self._started_on = started_on

    @property
    def ended_on(self):
        """Gets the ended_on of this Event.  # noqa: E501


        :return: The ended_on of this Event.  # noqa: E501
        :rtype: datetime
        """
        return self._ended_on

    @ended_on.setter
    def ended_on(self, ended_on):
        """Sets the ended_on of this Event.


        :param ended_on: The ended_on of this Event.  # noqa: E501
        :type: datetime
        """

        self._ended_on = ended_on

    @property
    def severity(self):
        """Gets the severity of this Event.  # noqa: E501


        :return: The severity of this Event.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this Event.


        :param severity: The severity of this Event.  # noqa: E501
        :type: str
        """
        allowed_values = ["minor", "major", "catastrophic"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"  # noqa: E501
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def created_by(self):
        """Gets the created_by of this Event.  # noqa: E501


        :return: The created_by of this Event.  # noqa: E501
        :rtype: int
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Event.


        :param created_by: The created_by of this Event.  # noqa: E501
        :type: int
        """

        self._created_by = created_by

    @property
    def updated_by(self):
        """Gets the updated_by of this Event.  # noqa: E501


        :return: The updated_by of this Event.  # noqa: E501
        :rtype: int
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this Event.


        :param updated_by: The updated_by of this Event.  # noqa: E501
        :type: int
        """

        self._updated_by = updated_by

    @property
    def hazard(self):
        """Gets the hazard of this Event.  # noqa: E501


        :return: The hazard of this Event.  # noqa: E501
        :rtype: int
        """
        return self._hazard

    @hazard.setter
    def hazard(self, hazard):
        """Sets the hazard of this Event.


        :param hazard: The hazard of this Event.  # noqa: E501
        :type: int
        """

        self._hazard = hazard

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Event, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Event):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
