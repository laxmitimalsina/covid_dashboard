# coding: utf-8

"""
    BIPAD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LayerGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'title': 'str',
        'short_description': 'str',
        'long_description': 'str',
        'category': 'str',
        'order': 'int',
        'tree_id': 'int',
        'level': 'int',
        'parent': 'int',
        'metadata': 'int'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'short_description': 'shortDescription',
        'long_description': 'longDescription',
        'category': 'category',
        'order': 'order',
        'tree_id': 'treeId',
        'level': 'level',
        'parent': 'parent',
        'metadata': 'metadata'
    }

    def __init__(self, id=None, title=None, short_description=None, long_description=None, category=None, order=None, tree_id=None, level=None, parent=None, metadata=None):  # noqa: E501
        """LayerGroup - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._title = None
        self._short_description = None
        self._long_description = None
        self._category = None
        self._order = None
        self._tree_id = None
        self._level = None
        self._parent = None
        self._metadata = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.title = title
        if short_description is not None:
            self.short_description = short_description
        if long_description is not None:
            self.long_description = long_description
        if category is not None:
            self.category = category
        if order is not None:
            self.order = order
        if tree_id is not None:
            self.tree_id = tree_id
        if level is not None:
            self.level = level
        if parent is not None:
            self.parent = parent
        if metadata is not None:
            self.metadata = metadata

    @property
    def id(self):
        """Gets the id of this LayerGroup.  # noqa: E501


        :return: The id of this LayerGroup.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LayerGroup.


        :param id: The id of this LayerGroup.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this LayerGroup.  # noqa: E501


        :return: The title of this LayerGroup.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this LayerGroup.


        :param title: The title of this LayerGroup.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501
        if title is not None and len(title) > 50:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `50`")  # noqa: E501
        if title is not None and len(title) < 1:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")  # noqa: E501

        self._title = title

    @property
    def short_description(self):
        """Gets the short_description of this LayerGroup.  # noqa: E501


        :return: The short_description of this LayerGroup.  # noqa: E501
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this LayerGroup.


        :param short_description: The short_description of this LayerGroup.  # noqa: E501
        :type: str
        """

        self._short_description = short_description

    @property
    def long_description(self):
        """Gets the long_description of this LayerGroup.  # noqa: E501


        :return: The long_description of this LayerGroup.  # noqa: E501
        :rtype: str
        """
        return self._long_description

    @long_description.setter
    def long_description(self, long_description):
        """Sets the long_description of this LayerGroup.


        :param long_description: The long_description of this LayerGroup.  # noqa: E501
        :type: str
        """

        self._long_description = long_description

    @property
    def category(self):
        """Gets the category of this LayerGroup.  # noqa: E501


        :return: The category of this LayerGroup.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this LayerGroup.


        :param category: The category of this LayerGroup.  # noqa: E501
        :type: str
        """
        allowed_values = ["hazard", "exposure", "vulnerability", "risk", "capacity_resource", "realtime", "climate_change", "other"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"  # noqa: E501
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def order(self):
        """Gets the order of this LayerGroup.  # noqa: E501


        :return: The order of this LayerGroup.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this LayerGroup.


        :param order: The order of this LayerGroup.  # noqa: E501
        :type: int
        """
        if order is not None and order > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `order`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if order is not None and order < 0:  # noqa: E501
            raise ValueError("Invalid value for `order`, must be a value greater than or equal to `0`")  # noqa: E501

        self._order = order

    @property
    def tree_id(self):
        """Gets the tree_id of this LayerGroup.  # noqa: E501


        :return: The tree_id of this LayerGroup.  # noqa: E501
        :rtype: int
        """
        return self._tree_id

    @tree_id.setter
    def tree_id(self, tree_id):
        """Sets the tree_id of this LayerGroup.


        :param tree_id: The tree_id of this LayerGroup.  # noqa: E501
        :type: int
        """

        self._tree_id = tree_id

    @property
    def level(self):
        """Gets the level of this LayerGroup.  # noqa: E501


        :return: The level of this LayerGroup.  # noqa: E501
        :rtype: int
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this LayerGroup.


        :param level: The level of this LayerGroup.  # noqa: E501
        :type: int
        """

        self._level = level

    @property
    def parent(self):
        """Gets the parent of this LayerGroup.  # noqa: E501


        :return: The parent of this LayerGroup.  # noqa: E501
        :rtype: int
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this LayerGroup.


        :param parent: The parent of this LayerGroup.  # noqa: E501
        :type: int
        """

        self._parent = parent

    @property
    def metadata(self):
        """Gets the metadata of this LayerGroup.  # noqa: E501


        :return: The metadata of this LayerGroup.  # noqa: E501
        :rtype: int
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this LayerGroup.


        :param metadata: The metadata of this LayerGroup.  # noqa: E501
        :type: int
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LayerGroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LayerGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
