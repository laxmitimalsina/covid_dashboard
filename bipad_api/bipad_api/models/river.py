# coding: utf-8

"""
    BIPAD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class River(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'created_on': 'datetime',
        'modified_on': 'datetime',
        'title': 'str',
        'basin': 'str',
        'point': 'str',
        'water_level': 'float',
        'image': 'str',
        'danger_level': 'float',
        'warning_level': 'float',
        'water_level_on': 'datetime',
        'status': 'str',
        'elevation': 'int',
        'steady': 'str',
        'description': 'str',
        'station_series_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'created_on': 'createdOn',
        'modified_on': 'modifiedOn',
        'title': 'title',
        'basin': 'basin',
        'point': 'point',
        'water_level': 'waterLevel',
        'image': 'image',
        'danger_level': 'dangerLevel',
        'warning_level': 'warningLevel',
        'water_level_on': 'waterLevelOn',
        'status': 'status',
        'elevation': 'elevation',
        'steady': 'steady',
        'description': 'description',
        'station_series_id': 'stationSeriesId'
    }

    def __init__(self, id=None, created_on=None, modified_on=None, title=None, basin=None, point=None, water_level=None, image=None, danger_level=None, warning_level=None, water_level_on=None, status=None, elevation=None, steady=None, description=None, station_series_id=None):  # noqa: E501
        """River - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._created_on = None
        self._modified_on = None
        self._title = None
        self._basin = None
        self._point = None
        self._water_level = None
        self._image = None
        self._danger_level = None
        self._warning_level = None
        self._water_level_on = None
        self._status = None
        self._elevation = None
        self._steady = None
        self._description = None
        self._station_series_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if created_on is not None:
            self.created_on = created_on
        if modified_on is not None:
            self.modified_on = modified_on
        self.title = title
        if basin is not None:
            self.basin = basin
        if point is not None:
            self.point = point
        if water_level is not None:
            self.water_level = water_level
        if image is not None:
            self.image = image
        if danger_level is not None:
            self.danger_level = danger_level
        if warning_level is not None:
            self.warning_level = warning_level
        if water_level_on is not None:
            self.water_level_on = water_level_on
        if status is not None:
            self.status = status
        if elevation is not None:
            self.elevation = elevation
        if steady is not None:
            self.steady = steady
        if description is not None:
            self.description = description
        if station_series_id is not None:
            self.station_series_id = station_series_id

    @property
    def id(self):
        """Gets the id of this River.  # noqa: E501


        :return: The id of this River.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this River.


        :param id: The id of this River.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def created_on(self):
        """Gets the created_on of this River.  # noqa: E501


        :return: The created_on of this River.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this River.


        :param created_on: The created_on of this River.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def modified_on(self):
        """Gets the modified_on of this River.  # noqa: E501


        :return: The modified_on of this River.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_on

    @modified_on.setter
    def modified_on(self, modified_on):
        """Sets the modified_on of this River.


        :param modified_on: The modified_on of this River.  # noqa: E501
        :type: datetime
        """

        self._modified_on = modified_on

    @property
    def title(self):
        """Gets the title of this River.  # noqa: E501


        :return: The title of this River.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this River.


        :param title: The title of this River.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501
        if title is not None and len(title) > 255:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `255`")  # noqa: E501
        if title is not None and len(title) < 1:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")  # noqa: E501

        self._title = title

    @property
    def basin(self):
        """Gets the basin of this River.  # noqa: E501


        :return: The basin of this River.  # noqa: E501
        :rtype: str
        """
        return self._basin

    @basin.setter
    def basin(self, basin):
        """Sets the basin of this River.


        :param basin: The basin of this River.  # noqa: E501
        :type: str
        """
        if basin is not None and len(basin) > 255:
            raise ValueError("Invalid value for `basin`, length must be less than or equal to `255`")  # noqa: E501

        self._basin = basin

    @property
    def point(self):
        """Gets the point of this River.  # noqa: E501


        :return: The point of this River.  # noqa: E501
        :rtype: str
        """
        return self._point

    @point.setter
    def point(self, point):
        """Sets the point of this River.


        :param point: The point of this River.  # noqa: E501
        :type: str
        """

        self._point = point

    @property
    def water_level(self):
        """Gets the water_level of this River.  # noqa: E501


        :return: The water_level of this River.  # noqa: E501
        :rtype: float
        """
        return self._water_level

    @water_level.setter
    def water_level(self, water_level):
        """Sets the water_level of this River.


        :param water_level: The water_level of this River.  # noqa: E501
        :type: float
        """

        self._water_level = water_level

    @property
    def image(self):
        """Gets the image of this River.  # noqa: E501


        :return: The image of this River.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this River.


        :param image: The image of this River.  # noqa: E501
        :type: str
        """
        if image is not None and len(image) > 200:
            raise ValueError("Invalid value for `image`, length must be less than or equal to `200`")  # noqa: E501

        self._image = image

    @property
    def danger_level(self):
        """Gets the danger_level of this River.  # noqa: E501


        :return: The danger_level of this River.  # noqa: E501
        :rtype: float
        """
        return self._danger_level

    @danger_level.setter
    def danger_level(self, danger_level):
        """Sets the danger_level of this River.


        :param danger_level: The danger_level of this River.  # noqa: E501
        :type: float
        """

        self._danger_level = danger_level

    @property
    def warning_level(self):
        """Gets the warning_level of this River.  # noqa: E501


        :return: The warning_level of this River.  # noqa: E501
        :rtype: float
        """
        return self._warning_level

    @warning_level.setter
    def warning_level(self, warning_level):
        """Sets the warning_level of this River.


        :param warning_level: The warning_level of this River.  # noqa: E501
        :type: float
        """

        self._warning_level = warning_level

    @property
    def water_level_on(self):
        """Gets the water_level_on of this River.  # noqa: E501


        :return: The water_level_on of this River.  # noqa: E501
        :rtype: datetime
        """
        return self._water_level_on

    @water_level_on.setter
    def water_level_on(self, water_level_on):
        """Sets the water_level_on of this River.


        :param water_level_on: The water_level_on of this River.  # noqa: E501
        :type: datetime
        """

        self._water_level_on = water_level_on

    @property
    def status(self):
        """Gets the status of this River.  # noqa: E501


        :return: The status of this River.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this River.


        :param status: The status of this River.  # noqa: E501
        :type: str
        """
        if status is not None and len(status) > 25:
            raise ValueError("Invalid value for `status`, length must be less than or equal to `25`")  # noqa: E501

        self._status = status

    @property
    def elevation(self):
        """Gets the elevation of this River.  # noqa: E501


        :return: The elevation of this River.  # noqa: E501
        :rtype: int
        """
        return self._elevation

    @elevation.setter
    def elevation(self, elevation):
        """Sets the elevation of this River.


        :param elevation: The elevation of this River.  # noqa: E501
        :type: int
        """
        if elevation is not None and elevation > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `elevation`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if elevation is not None and elevation < -2147483648:  # noqa: E501
            raise ValueError("Invalid value for `elevation`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._elevation = elevation

    @property
    def steady(self):
        """Gets the steady of this River.  # noqa: E501


        :return: The steady of this River.  # noqa: E501
        :rtype: str
        """
        return self._steady

    @steady.setter
    def steady(self, steady):
        """Sets the steady of this River.


        :param steady: The steady of this River.  # noqa: E501
        :type: str
        """
        if steady is not None and len(steady) > 25:
            raise ValueError("Invalid value for `steady`, length must be less than or equal to `25`")  # noqa: E501

        self._steady = steady

    @property
    def description(self):
        """Gets the description of this River.  # noqa: E501


        :return: The description of this River.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this River.


        :param description: The description of this River.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def station_series_id(self):
        """Gets the station_series_id of this River.  # noqa: E501


        :return: The station_series_id of this River.  # noqa: E501
        :rtype: int
        """
        return self._station_series_id

    @station_series_id.setter
    def station_series_id(self, station_series_id):
        """Sets the station_series_id of this River.


        :param station_series_id: The station_series_id of this River.  # noqa: E501
        :type: int
        """
        if station_series_id is not None and station_series_id > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `station_series_id`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if station_series_id is not None and station_series_id < -2147483648:  # noqa: E501
            raise ValueError("Invalid value for `station_series_id`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._station_series_id = station_series_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(River, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, River):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
