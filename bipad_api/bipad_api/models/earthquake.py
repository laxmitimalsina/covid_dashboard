# coding: utf-8

"""
    BIPAD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Earthquake(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'created_on': 'datetime',
        'modified_on': 'datetime',
        'description': 'str',
        'point': 'str',
        'magnitude': 'float',
        'address': 'str',
        'event_on': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'created_on': 'createdOn',
        'modified_on': 'modifiedOn',
        'description': 'description',
        'point': 'point',
        'magnitude': 'magnitude',
        'address': 'address',
        'event_on': 'eventOn'
    }

    def __init__(self, id=None, created_on=None, modified_on=None, description=None, point=None, magnitude=None, address=None, event_on=None):  # noqa: E501
        """Earthquake - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._created_on = None
        self._modified_on = None
        self._description = None
        self._point = None
        self._magnitude = None
        self._address = None
        self._event_on = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if created_on is not None:
            self.created_on = created_on
        if modified_on is not None:
            self.modified_on = modified_on
        if description is not None:
            self.description = description
        self.point = point
        self.magnitude = magnitude
        if address is not None:
            self.address = address
        self.event_on = event_on

    @property
    def id(self):
        """Gets the id of this Earthquake.  # noqa: E501


        :return: The id of this Earthquake.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Earthquake.


        :param id: The id of this Earthquake.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def created_on(self):
        """Gets the created_on of this Earthquake.  # noqa: E501


        :return: The created_on of this Earthquake.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this Earthquake.


        :param created_on: The created_on of this Earthquake.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def modified_on(self):
        """Gets the modified_on of this Earthquake.  # noqa: E501


        :return: The modified_on of this Earthquake.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_on

    @modified_on.setter
    def modified_on(self, modified_on):
        """Sets the modified_on of this Earthquake.


        :param modified_on: The modified_on of this Earthquake.  # noqa: E501
        :type: datetime
        """

        self._modified_on = modified_on

    @property
    def description(self):
        """Gets the description of this Earthquake.  # noqa: E501


        :return: The description of this Earthquake.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Earthquake.


        :param description: The description of this Earthquake.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def point(self):
        """Gets the point of this Earthquake.  # noqa: E501


        :return: The point of this Earthquake.  # noqa: E501
        :rtype: str
        """
        return self._point

    @point.setter
    def point(self, point):
        """Sets the point of this Earthquake.


        :param point: The point of this Earthquake.  # noqa: E501
        :type: str
        """
        if point is None:
            raise ValueError("Invalid value for `point`, must not be `None`")  # noqa: E501

        self._point = point

    @property
    def magnitude(self):
        """Gets the magnitude of this Earthquake.  # noqa: E501


        :return: The magnitude of this Earthquake.  # noqa: E501
        :rtype: float
        """
        return self._magnitude

    @magnitude.setter
    def magnitude(self, magnitude):
        """Sets the magnitude of this Earthquake.


        :param magnitude: The magnitude of this Earthquake.  # noqa: E501
        :type: float
        """
        if magnitude is None:
            raise ValueError("Invalid value for `magnitude`, must not be `None`")  # noqa: E501

        self._magnitude = magnitude

    @property
    def address(self):
        """Gets the address of this Earthquake.  # noqa: E501


        :return: The address of this Earthquake.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Earthquake.


        :param address: The address of this Earthquake.  # noqa: E501
        :type: str
        """
        if address is not None and len(address) > 255:
            raise ValueError("Invalid value for `address`, length must be less than or equal to `255`")  # noqa: E501

        self._address = address

    @property
    def event_on(self):
        """Gets the event_on of this Earthquake.  # noqa: E501


        :return: The event_on of this Earthquake.  # noqa: E501
        :rtype: datetime
        """
        return self._event_on

    @event_on.setter
    def event_on(self, event_on):
        """Sets the event_on of this Earthquake.


        :param event_on: The event_on of this Earthquake.  # noqa: E501
        :type: datetime
        """
        if event_on is None:
            raise ValueError("Invalid value for `event_on`, must not be `None`")  # noqa: E501

        self._event_on = event_on

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Earthquake, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Earthquake):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
