# coding: utf-8

"""
    BIPAD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Pollution(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'created_on': 'datetime',
        'modified_on': 'datetime',
        'title': 'str',
        'identifier': 'str',
        'aqi_color': 'str',
        'aqi': 'float',
        'observation': 'str',
        'tags': 'str',
        'images': 'list[str]',
        'point': 'str',
        'elevation': 'float',
        'description': 'str'
    }

    attribute_map = {
        'id': 'id',
        'created_on': 'createdOn',
        'modified_on': 'modifiedOn',
        'title': 'title',
        'identifier': 'identifier',
        'aqi_color': 'aqiColor',
        'aqi': 'aqi',
        'observation': 'observation',
        'tags': 'tags',
        'images': 'images',
        'point': 'point',
        'elevation': 'elevation',
        'description': 'description'
    }

    def __init__(self, id=None, created_on=None, modified_on=None, title=None, identifier=None, aqi_color=None, aqi=None, observation=None, tags=None, images=None, point=None, elevation=None, description=None):  # noqa: E501
        """Pollution - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._created_on = None
        self._modified_on = None
        self._title = None
        self._identifier = None
        self._aqi_color = None
        self._aqi = None
        self._observation = None
        self._tags = None
        self._images = None
        self._point = None
        self._elevation = None
        self._description = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if created_on is not None:
            self.created_on = created_on
        if modified_on is not None:
            self.modified_on = modified_on
        self.title = title
        self.identifier = identifier
        if aqi_color is not None:
            self.aqi_color = aqi_color
        self.aqi = aqi
        self.observation = observation
        self.tags = tags
        if images is not None:
            self.images = images
        self.point = point
        if elevation is not None:
            self.elevation = elevation
        if description is not None:
            self.description = description

    @property
    def id(self):
        """Gets the id of this Pollution.  # noqa: E501


        :return: The id of this Pollution.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Pollution.


        :param id: The id of this Pollution.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def created_on(self):
        """Gets the created_on of this Pollution.  # noqa: E501


        :return: The created_on of this Pollution.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this Pollution.


        :param created_on: The created_on of this Pollution.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def modified_on(self):
        """Gets the modified_on of this Pollution.  # noqa: E501


        :return: The modified_on of this Pollution.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_on

    @modified_on.setter
    def modified_on(self, modified_on):
        """Sets the modified_on of this Pollution.


        :param modified_on: The modified_on of this Pollution.  # noqa: E501
        :type: datetime
        """

        self._modified_on = modified_on

    @property
    def title(self):
        """Gets the title of this Pollution.  # noqa: E501


        :return: The title of this Pollution.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Pollution.


        :param title: The title of this Pollution.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501
        if title is not None and len(title) > 255:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `255`")  # noqa: E501
        if title is not None and len(title) < 1:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")  # noqa: E501

        self._title = title

    @property
    def identifier(self):
        """Gets the identifier of this Pollution.  # noqa: E501


        :return: The identifier of this Pollution.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this Pollution.


        :param identifier: The identifier of this Pollution.  # noqa: E501
        :type: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")  # noqa: E501
        if identifier is not None and len(identifier) > 255:
            raise ValueError("Invalid value for `identifier`, length must be less than or equal to `255`")  # noqa: E501
        if identifier is not None and len(identifier) < 1:
            raise ValueError("Invalid value for `identifier`, length must be greater than or equal to `1`")  # noqa: E501

        self._identifier = identifier

    @property
    def aqi_color(self):
        """Gets the aqi_color of this Pollution.  # noqa: E501


        :return: The aqi_color of this Pollution.  # noqa: E501
        :rtype: str
        """
        return self._aqi_color

    @aqi_color.setter
    def aqi_color(self, aqi_color):
        """Sets the aqi_color of this Pollution.


        :param aqi_color: The aqi_color of this Pollution.  # noqa: E501
        :type: str
        """
        if aqi_color is not None and len(aqi_color) > 18:
            raise ValueError("Invalid value for `aqi_color`, length must be less than or equal to `18`")  # noqa: E501
        if aqi_color is not None and not re.search(r'^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$', aqi_color):  # noqa: E501
            raise ValueError(r"Invalid value for `aqi_color`, must be a follow pattern or equal to `/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/`")  # noqa: E501

        self._aqi_color = aqi_color

    @property
    def aqi(self):
        """Gets the aqi of this Pollution.  # noqa: E501


        :return: The aqi of this Pollution.  # noqa: E501
        :rtype: float
        """
        return self._aqi

    @aqi.setter
    def aqi(self, aqi):
        """Sets the aqi of this Pollution.


        :param aqi: The aqi of this Pollution.  # noqa: E501
        :type: float
        """
        if aqi is None:
            raise ValueError("Invalid value for `aqi`, must not be `None`")  # noqa: E501

        self._aqi = aqi

    @property
    def observation(self):
        """Gets the observation of this Pollution.  # noqa: E501


        :return: The observation of this Pollution.  # noqa: E501
        :rtype: str
        """
        return self._observation

    @observation.setter
    def observation(self, observation):
        """Sets the observation of this Pollution.


        :param observation: The observation of this Pollution.  # noqa: E501
        :type: str
        """
        if observation is None:
            raise ValueError("Invalid value for `observation`, must not be `None`")  # noqa: E501

        self._observation = observation

    @property
    def tags(self):
        """Gets the tags of this Pollution.  # noqa: E501


        :return: The tags of this Pollution.  # noqa: E501
        :rtype: str
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Pollution.


        :param tags: The tags of this Pollution.  # noqa: E501
        :type: str
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")  # noqa: E501

        self._tags = tags

    @property
    def images(self):
        """Gets the images of this Pollution.  # noqa: E501


        :return: The images of this Pollution.  # noqa: E501
        :rtype: list[str]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this Pollution.


        :param images: The images of this Pollution.  # noqa: E501
        :type: list[str]
        """

        self._images = images

    @property
    def point(self):
        """Gets the point of this Pollution.  # noqa: E501


        :return: The point of this Pollution.  # noqa: E501
        :rtype: str
        """
        return self._point

    @point.setter
    def point(self, point):
        """Sets the point of this Pollution.


        :param point: The point of this Pollution.  # noqa: E501
        :type: str
        """
        if point is None:
            raise ValueError("Invalid value for `point`, must not be `None`")  # noqa: E501

        self._point = point

    @property
    def elevation(self):
        """Gets the elevation of this Pollution.  # noqa: E501


        :return: The elevation of this Pollution.  # noqa: E501
        :rtype: float
        """
        return self._elevation

    @elevation.setter
    def elevation(self, elevation):
        """Sets the elevation of this Pollution.


        :param elevation: The elevation of this Pollution.  # noqa: E501
        :type: float
        """

        self._elevation = elevation

    @property
    def description(self):
        """Gets the description of this Pollution.  # noqa: E501


        :return: The description of this Pollution.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Pollution.


        :param description: The description of this Pollution.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Pollution, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Pollution):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
