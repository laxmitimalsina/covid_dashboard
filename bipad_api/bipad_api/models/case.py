# coding: utf-8

"""
    BIPAD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Case(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'province': 'str',
        'district': 'str',
        'municipality': 'str',
        'created_on': 'datetime',
        'modified_on': 'datetime',
        'label': 'str',
        'gender': 'str',
        'age': 'int',
        'point': 'str',
        'occupation': 'str',
        'reported_on': 'date',
        'recovered_on': 'date',
        'death_on': 'date',
        'current_state': 'str',
        'is_reinfected': 'bool',
        'source': 'str',
        'comment': 'str',
        'type': 'str',
        'nationality': 'int',
        'ward': 'int',
        'related_to': 'list[int]'
    }

    attribute_map = {
        'id': 'id',
        'province': 'province',
        'district': 'district',
        'municipality': 'municipality',
        'created_on': 'createdOn',
        'modified_on': 'modifiedOn',
        'label': 'label',
        'gender': 'gender',
        'age': 'age',
        'point': 'point',
        'occupation': 'occupation',
        'reported_on': 'reportedOn',
        'recovered_on': 'recoveredOn',
        'death_on': 'deathOn',
        'current_state': 'currentState',
        'is_reinfected': 'isReinfected',
        'source': 'source',
        'comment': 'comment',
        'type': 'type',
        'nationality': 'nationality',
        'ward': 'ward',
        'related_to': 'relatedTo'
    }

    def __init__(self, id=None, province=None, district=None, municipality=None, created_on=None, modified_on=None, label=None, gender=None, age=None, point=None, occupation=None, reported_on=None, recovered_on=None, death_on=None, current_state=None, is_reinfected=None, source=None, comment=None, type=None, nationality=None, ward=None, related_to=None):  # noqa: E501
        """Case - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._province = None
        self._district = None
        self._municipality = None
        self._created_on = None
        self._modified_on = None
        self._label = None
        self._gender = None
        self._age = None
        self._point = None
        self._occupation = None
        self._reported_on = None
        self._recovered_on = None
        self._death_on = None
        self._current_state = None
        self._is_reinfected = None
        self._source = None
        self._comment = None
        self._type = None
        self._nationality = None
        self._ward = None
        self._related_to = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if province is not None:
            self.province = province
        if district is not None:
            self.district = district
        if municipality is not None:
            self.municipality = municipality
        if created_on is not None:
            self.created_on = created_on
        if modified_on is not None:
            self.modified_on = modified_on
        self.label = label
        if gender is not None:
            self.gender = gender
        if age is not None:
            self.age = age
        self.point = point
        if occupation is not None:
            self.occupation = occupation
        self.reported_on = reported_on
        if recovered_on is not None:
            self.recovered_on = recovered_on
        if death_on is not None:
            self.death_on = death_on
        if current_state is not None:
            self.current_state = current_state
        if is_reinfected is not None:
            self.is_reinfected = is_reinfected
        self.source = source
        if comment is not None:
            self.comment = comment
        if type is not None:
            self.type = type
        if nationality is not None:
            self.nationality = nationality
        if ward is not None:
            self.ward = ward
        if related_to is not None:
            self.related_to = related_to

    @property
    def id(self):
        """Gets the id of this Case.  # noqa: E501


        :return: The id of this Case.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Case.


        :param id: The id of this Case.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def province(self):
        """Gets the province of this Case.  # noqa: E501


        :return: The province of this Case.  # noqa: E501
        :rtype: str
        """
        return self._province

    @province.setter
    def province(self, province):
        """Sets the province of this Case.


        :param province: The province of this Case.  # noqa: E501
        :type: str
        """

        self._province = province

    @property
    def district(self):
        """Gets the district of this Case.  # noqa: E501


        :return: The district of this Case.  # noqa: E501
        :rtype: str
        """
        return self._district

    @district.setter
    def district(self, district):
        """Sets the district of this Case.


        :param district: The district of this Case.  # noqa: E501
        :type: str
        """

        self._district = district

    @property
    def municipality(self):
        """Gets the municipality of this Case.  # noqa: E501


        :return: The municipality of this Case.  # noqa: E501
        :rtype: str
        """
        return self._municipality

    @municipality.setter
    def municipality(self, municipality):
        """Sets the municipality of this Case.


        :param municipality: The municipality of this Case.  # noqa: E501
        :type: str
        """

        self._municipality = municipality

    @property
    def created_on(self):
        """Gets the created_on of this Case.  # noqa: E501


        :return: The created_on of this Case.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this Case.


        :param created_on: The created_on of this Case.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def modified_on(self):
        """Gets the modified_on of this Case.  # noqa: E501


        :return: The modified_on of this Case.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_on

    @modified_on.setter
    def modified_on(self, modified_on):
        """Sets the modified_on of this Case.


        :param modified_on: The modified_on of this Case.  # noqa: E501
        :type: datetime
        """

        self._modified_on = modified_on

    @property
    def label(self):
        """Gets the label of this Case.  # noqa: E501


        :return: The label of this Case.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Case.


        :param label: The label of this Case.  # noqa: E501
        :type: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501
        if label is not None and len(label) > 255:
            raise ValueError("Invalid value for `label`, length must be less than or equal to `255`")  # noqa: E501
        if label is not None and len(label) < 1:
            raise ValueError("Invalid value for `label`, length must be greater than or equal to `1`")  # noqa: E501

        self._label = label

    @property
    def gender(self):
        """Gets the gender of this Case.  # noqa: E501


        :return: The gender of this Case.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this Case.


        :param gender: The gender of this Case.  # noqa: E501
        :type: str
        """
        allowed_values = ["male", "female", "other"]  # noqa: E501
        if gender.lower() not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"  # noqa: E501
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def age(self):
        """Gets the age of this Case.  # noqa: E501


        :return: The age of this Case.  # noqa: E501
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this Case.


        :param age: The age of this Case.  # noqa: E501
        :type: int
        """
        if age is not None and age > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `age`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if age is not None and age < 0:  # noqa: E501
            raise ValueError("Invalid value for `age`, must be a value greater than or equal to `0`")  # noqa: E501

        self._age = age

    @property
    def point(self):
        """Gets the point of this Case.  # noqa: E501


        :return: The point of this Case.  # noqa: E501
        :rtype: str
        """
        return self._point

    @point.setter
    def point(self, point):
        """Sets the point of this Case.


        :param point: The point of this Case.  # noqa: E501
        :type: str
        """
        if point is None:
            raise ValueError("Invalid value for `point`, must not be `None`")  # noqa: E501

        self._point = point

    @property
    def occupation(self):
        """Gets the occupation of this Case.  # noqa: E501


        :return: The occupation of this Case.  # noqa: E501
        :rtype: str
        """
        return self._occupation

    @occupation.setter
    def occupation(self, occupation):
        """Sets the occupation of this Case.


        :param occupation: The occupation of this Case.  # noqa: E501
        :type: str
        """
        if occupation is not None and len(occupation) > 255:
            raise ValueError("Invalid value for `occupation`, length must be less than or equal to `255`")  # noqa: E501

        self._occupation = occupation

    @property
    def reported_on(self):
        """Gets the reported_on of this Case.  # noqa: E501


        :return: The reported_on of this Case.  # noqa: E501
        :rtype: date
        """
        return self._reported_on

    @reported_on.setter
    def reported_on(self, reported_on):
        """Sets the reported_on of this Case.


        :param reported_on: The reported_on of this Case.  # noqa: E501
        :type: date
        """
        if reported_on is None:
            raise ValueError("Invalid value for `reported_on`, must not be `None`")  # noqa: E501

        self._reported_on = reported_on

    @property
    def recovered_on(self):
        """Gets the recovered_on of this Case.  # noqa: E501


        :return: The recovered_on of this Case.  # noqa: E501
        :rtype: date
        """
        return self._recovered_on

    @recovered_on.setter
    def recovered_on(self, recovered_on):
        """Sets the recovered_on of this Case.


        :param recovered_on: The recovered_on of this Case.  # noqa: E501
        :type: date
        """

        self._recovered_on = recovered_on

    @property
    def death_on(self):
        """Gets the death_on of this Case.  # noqa: E501


        :return: The death_on of this Case.  # noqa: E501
        :rtype: date
        """
        return self._death_on

    @death_on.setter
    def death_on(self, death_on):
        """Sets the death_on of this Case.


        :param death_on: The death_on of this Case.  # noqa: E501
        :type: date
        """

        self._death_on = death_on

    @property
    def current_state(self):
        """Gets the current_state of this Case.  # noqa: E501


        :return: The current_state of this Case.  # noqa: E501
        :rtype: str
        """
        return self._current_state

    @current_state.setter
    def current_state(self, current_state):
        """Sets the current_state of this Case.


        :param current_state: The current_state of this Case.  # noqa: E501
        :type: str
        """
        allowed_values = ["death", "active", "recovered"]  # noqa: E501
        if current_state not in allowed_values:
            raise ValueError(
                "Invalid value for `current_state` ({0}), must be one of {1}"  # noqa: E501
                .format(current_state, allowed_values)
            )

        self._current_state = current_state

    @property
    def is_reinfected(self):
        """Gets the is_reinfected of this Case.  # noqa: E501


        :return: The is_reinfected of this Case.  # noqa: E501
        :rtype: bool
        """
        return self._is_reinfected

    @is_reinfected.setter
    def is_reinfected(self, is_reinfected):
        """Sets the is_reinfected of this Case.


        :param is_reinfected: The is_reinfected of this Case.  # noqa: E501
        :type: bool
        """

        self._is_reinfected = is_reinfected

    @property
    def source(self):
        """Gets the source of this Case.  # noqa: E501


        :return: The source of this Case.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Case.


        :param source: The source of this Case.  # noqa: E501
        :type: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501
        if source is not None and len(source) > 200:
            raise ValueError("Invalid value for `source`, length must be less than or equal to `200`")  # noqa: E501
        if source is not None and len(source) < 1:
            raise ValueError("Invalid value for `source`, length must be greater than or equal to `1`")  # noqa: E501

        self._source = source

    @property
    def comment(self):
        """Gets the comment of this Case.  # noqa: E501


        :return: The comment of this Case.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Case.


        :param comment: The comment of this Case.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def type(self):
        """Gets the type of this Case.  # noqa: E501


        :return: The type of this Case.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Case.


        :param type: The type of this Case.  # noqa: E501
        :type: str
        """
        allowed_values = ["local_transmission", "imported"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def nationality(self):
        """Gets the nationality of this Case.  # noqa: E501


        :return: The nationality of this Case.  # noqa: E501
        :rtype: int
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality):
        """Sets the nationality of this Case.


        :param nationality: The nationality of this Case.  # noqa: E501
        :type: int
        """

        self._nationality = nationality

    @property
    def ward(self):
        """Gets the ward of this Case.  # noqa: E501


        :return: The ward of this Case.  # noqa: E501
        :rtype: int
        """
        return self._ward

    @ward.setter
    def ward(self, ward):
        """Sets the ward of this Case.


        :param ward: The ward of this Case.  # noqa: E501
        :type: int
        """

        self._ward = ward

    @property
    def related_to(self):
        """Gets the related_to of this Case.  # noqa: E501


        :return: The related_to of this Case.  # noqa: E501
        :rtype: list[int]
        """
        return self._related_to

    @related_to.setter
    def related_to(self, related_to):
        """Sets the related_to of this Case.


        :param related_to: The related_to of this Case.  # noqa: E501
        :type: list[int]
        """

        self._related_to = related_to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Case, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Case):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
