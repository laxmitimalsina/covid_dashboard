# coding: utf-8

"""
    BIPAD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class StreamFlow(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'created_on': 'datetime',
        'modified_on': 'datetime',
        'comid': 'int',
        'data': 'str',
        'return_period': 'str'
    }

    attribute_map = {
        'id': 'id',
        'created_on': 'createdOn',
        'modified_on': 'modifiedOn',
        'comid': 'comid',
        'data': 'data',
        'return_period': 'returnPeriod'
    }

    def __init__(self, id=None, created_on=None, modified_on=None, comid=None, data=None, return_period=None):  # noqa: E501
        """StreamFlow - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._created_on = None
        self._modified_on = None
        self._comid = None
        self._data = None
        self._return_period = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if created_on is not None:
            self.created_on = created_on
        if modified_on is not None:
            self.modified_on = modified_on
        self.comid = comid
        self.data = data
        self.return_period = return_period

    @property
    def id(self):
        """Gets the id of this StreamFlow.  # noqa: E501


        :return: The id of this StreamFlow.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StreamFlow.


        :param id: The id of this StreamFlow.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def created_on(self):
        """Gets the created_on of this StreamFlow.  # noqa: E501


        :return: The created_on of this StreamFlow.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this StreamFlow.


        :param created_on: The created_on of this StreamFlow.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def modified_on(self):
        """Gets the modified_on of this StreamFlow.  # noqa: E501


        :return: The modified_on of this StreamFlow.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_on

    @modified_on.setter
    def modified_on(self, modified_on):
        """Sets the modified_on of this StreamFlow.


        :param modified_on: The modified_on of this StreamFlow.  # noqa: E501
        :type: datetime
        """

        self._modified_on = modified_on

    @property
    def comid(self):
        """Gets the comid of this StreamFlow.  # noqa: E501


        :return: The comid of this StreamFlow.  # noqa: E501
        :rtype: int
        """
        return self._comid

    @comid.setter
    def comid(self, comid):
        """Sets the comid of this StreamFlow.


        :param comid: The comid of this StreamFlow.  # noqa: E501
        :type: int
        """
        if comid is None:
            raise ValueError("Invalid value for `comid`, must not be `None`")  # noqa: E501
        if comid is not None and comid > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `comid`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if comid is not None and comid < -2147483648:  # noqa: E501
            raise ValueError("Invalid value for `comid`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._comid = comid

    @property
    def data(self):
        """Gets the data of this StreamFlow.  # noqa: E501


        :return: The data of this StreamFlow.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this StreamFlow.


        :param data: The data of this StreamFlow.  # noqa: E501
        :type: str
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")  # noqa: E501

        self._data = data

    @property
    def return_period(self):
        """Gets the return_period of this StreamFlow.  # noqa: E501


        :return: The return_period of this StreamFlow.  # noqa: E501
        :rtype: str
        """
        return self._return_period

    @return_period.setter
    def return_period(self, return_period):
        """Sets the return_period of this StreamFlow.


        :param return_period: The return_period of this StreamFlow.  # noqa: E501
        :type: str
        """
        if return_period is None:
            raise ValueError("Invalid value for `return_period`, must not be `None`")  # noqa: E501

        self._return_period = return_period

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StreamFlow, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StreamFlow):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
