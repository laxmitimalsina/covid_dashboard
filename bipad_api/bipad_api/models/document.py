# coding: utf-8

"""
    BIPAD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Document(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'created_on': 'datetime',
        'modified_on': 'datetime',
        'title': 'str',
        'description': 'str',
        'region': 'str',
        'file': 'str',
        'image': 'str',
        'published_date': 'date',
        'created_by': 'int',
        'updated_by': 'int',
        'category': 'int',
        'province': 'int',
        'district': 'int',
        'municipality': 'int',
        'event': 'int'
    }

    attribute_map = {
        'id': 'id',
        'created_on': 'createdOn',
        'modified_on': 'modifiedOn',
        'title': 'title',
        'description': 'description',
        'region': 'region',
        'file': 'file',
        'image': 'image',
        'published_date': 'publishedDate',
        'created_by': 'createdBy',
        'updated_by': 'updatedBy',
        'category': 'category',
        'province': 'province',
        'district': 'district',
        'municipality': 'municipality',
        'event': 'event'
    }

    def __init__(self, id=None, created_on=None, modified_on=None, title=None, description=None, region=None, file=None, image=None, published_date=None, created_by=None, updated_by=None, category=None, province=None, district=None, municipality=None, event=None):  # noqa: E501
        """Document - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._created_on = None
        self._modified_on = None
        self._title = None
        self._description = None
        self._region = None
        self._file = None
        self._image = None
        self._published_date = None
        self._created_by = None
        self._updated_by = None
        self._category = None
        self._province = None
        self._district = None
        self._municipality = None
        self._event = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if created_on is not None:
            self.created_on = created_on
        if modified_on is not None:
            self.modified_on = modified_on
        self.title = title
        if description is not None:
            self.description = description
        if region is not None:
            self.region = region
        if file is not None:
            self.file = file
        if image is not None:
            self.image = image
        if published_date is not None:
            self.published_date = published_date
        if created_by is not None:
            self.created_by = created_by
        if updated_by is not None:
            self.updated_by = updated_by
        if category is not None:
            self.category = category
        if province is not None:
            self.province = province
        if district is not None:
            self.district = district
        if municipality is not None:
            self.municipality = municipality
        if event is not None:
            self.event = event

    @property
    def id(self):
        """Gets the id of this Document.  # noqa: E501


        :return: The id of this Document.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Document.


        :param id: The id of this Document.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def created_on(self):
        """Gets the created_on of this Document.  # noqa: E501


        :return: The created_on of this Document.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this Document.


        :param created_on: The created_on of this Document.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def modified_on(self):
        """Gets the modified_on of this Document.  # noqa: E501


        :return: The modified_on of this Document.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_on

    @modified_on.setter
    def modified_on(self, modified_on):
        """Sets the modified_on of this Document.


        :param modified_on: The modified_on of this Document.  # noqa: E501
        :type: datetime
        """

        self._modified_on = modified_on

    @property
    def title(self):
        """Gets the title of this Document.  # noqa: E501


        :return: The title of this Document.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Document.


        :param title: The title of this Document.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501
        if title is not None and len(title) > 255:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `255`")  # noqa: E501
        if title is not None and len(title) < 1:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")  # noqa: E501

        self._title = title

    @property
    def description(self):
        """Gets the description of this Document.  # noqa: E501


        :return: The description of this Document.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Document.


        :param description: The description of this Document.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def region(self):
        """Gets the region of this Document.  # noqa: E501


        :return: The region of this Document.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Document.


        :param region: The region of this Document.  # noqa: E501
        :type: str
        """
        allowed_values = ["municipality", "district", "province", "national"]  # noqa: E501
        if region not in allowed_values:
            raise ValueError(
                "Invalid value for `region` ({0}), must be one of {1}"  # noqa: E501
                .format(region, allowed_values)
            )

        self._region = region

    @property
    def file(self):
        """Gets the file of this Document.  # noqa: E501


        :return: The file of this Document.  # noqa: E501
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this Document.


        :param file: The file of this Document.  # noqa: E501
        :type: str
        """

        self._file = file

    @property
    def image(self):
        """Gets the image of this Document.  # noqa: E501


        :return: The image of this Document.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Document.


        :param image: The image of this Document.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def published_date(self):
        """Gets the published_date of this Document.  # noqa: E501


        :return: The published_date of this Document.  # noqa: E501
        :rtype: date
        """
        return self._published_date

    @published_date.setter
    def published_date(self, published_date):
        """Sets the published_date of this Document.


        :param published_date: The published_date of this Document.  # noqa: E501
        :type: date
        """

        self._published_date = published_date

    @property
    def created_by(self):
        """Gets the created_by of this Document.  # noqa: E501


        :return: The created_by of this Document.  # noqa: E501
        :rtype: int
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Document.


        :param created_by: The created_by of this Document.  # noqa: E501
        :type: int
        """

        self._created_by = created_by

    @property
    def updated_by(self):
        """Gets the updated_by of this Document.  # noqa: E501


        :return: The updated_by of this Document.  # noqa: E501
        :rtype: int
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this Document.


        :param updated_by: The updated_by of this Document.  # noqa: E501
        :type: int
        """

        self._updated_by = updated_by

    @property
    def category(self):
        """Gets the category of this Document.  # noqa: E501


        :return: The category of this Document.  # noqa: E501
        :rtype: int
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Document.


        :param category: The category of this Document.  # noqa: E501
        :type: int
        """

        self._category = category

    @property
    def province(self):
        """Gets the province of this Document.  # noqa: E501


        :return: The province of this Document.  # noqa: E501
        :rtype: int
        """
        return self._province

    @province.setter
    def province(self, province):
        """Sets the province of this Document.


        :param province: The province of this Document.  # noqa: E501
        :type: int
        """

        self._province = province

    @property
    def district(self):
        """Gets the district of this Document.  # noqa: E501


        :return: The district of this Document.  # noqa: E501
        :rtype: int
        """
        return self._district

    @district.setter
    def district(self, district):
        """Sets the district of this Document.


        :param district: The district of this Document.  # noqa: E501
        :type: int
        """

        self._district = district

    @property
    def municipality(self):
        """Gets the municipality of this Document.  # noqa: E501


        :return: The municipality of this Document.  # noqa: E501
        :rtype: int
        """
        return self._municipality

    @municipality.setter
    def municipality(self, municipality):
        """Sets the municipality of this Document.


        :param municipality: The municipality of this Document.  # noqa: E501
        :type: int
        """

        self._municipality = municipality

    @property
    def event(self):
        """Gets the event of this Document.  # noqa: E501


        :return: The event of this Document.  # noqa: E501
        :rtype: int
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this Document.


        :param event: The event of this Document.  # noqa: E501
        :type: int
        """

        self._event = event

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Document, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Document):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
