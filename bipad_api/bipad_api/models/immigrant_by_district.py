# coding: utf-8

"""
    BIPAD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ImmigrantByDistrict(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'returnees_count': 'int',
        'title': 'str',
        'title_en': 'str',
        'title_ne': 'str',
        'code': 'str',
        'bbox': 'list[float]',
        'centroid': 'str',
        'order': 'int',
        'province': 'int'
    }

    attribute_map = {
        'id': 'id',
        'returnees_count': 'returneesCount',
        'title': 'title',
        'title_en': 'titleEn',
        'title_ne': 'titleNe',
        'code': 'code',
        'bbox': 'bbox',
        'centroid': 'centroid',
        'order': 'order',
        'province': 'province'
    }

    def __init__(self, id=None, returnees_count=None, title=None, title_en=None, title_ne=None, code=None, bbox=None, centroid=None, order=None, province=None):  # noqa: E501
        """ImmigrantByDistrict - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._returnees_count = None
        self._title = None
        self._title_en = None
        self._title_ne = None
        self._code = None
        self._bbox = None
        self._centroid = None
        self._order = None
        self._province = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.returnees_count = returnees_count
        self.title = title
        if title_en is not None:
            self.title_en = title_en
        if title_ne is not None:
            self.title_ne = title_ne
        if code is not None:
            self.code = code
        if bbox is not None:
            self.bbox = bbox
        if centroid is not None:
            self.centroid = centroid
        if order is not None:
            self.order = order
        self.province = province

    @property
    def id(self):
        """Gets the id of this ImmigrantByDistrict.  # noqa: E501


        :return: The id of this ImmigrantByDistrict.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ImmigrantByDistrict.


        :param id: The id of this ImmigrantByDistrict.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def returnees_count(self):
        """Gets the returnees_count of this ImmigrantByDistrict.  # noqa: E501


        :return: The returnees_count of this ImmigrantByDistrict.  # noqa: E501
        :rtype: int
        """
        return self._returnees_count

    @returnees_count.setter
    def returnees_count(self, returnees_count):
        """Sets the returnees_count of this ImmigrantByDistrict.


        :param returnees_count: The returnees_count of this ImmigrantByDistrict.  # noqa: E501
        :type: int
        """
        if returnees_count is None:
            raise ValueError("Invalid value for `returnees_count`, must not be `None`")  # noqa: E501

        self._returnees_count = returnees_count

    @property
    def title(self):
        """Gets the title of this ImmigrantByDistrict.  # noqa: E501


        :return: The title of this ImmigrantByDistrict.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ImmigrantByDistrict.


        :param title: The title of this ImmigrantByDistrict.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501
        if title is not None and len(title) > 255:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `255`")  # noqa: E501
        if title is not None and len(title) < 1:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")  # noqa: E501

        self._title = title

    @property
    def title_en(self):
        """Gets the title_en of this ImmigrantByDistrict.  # noqa: E501


        :return: The title_en of this ImmigrantByDistrict.  # noqa: E501
        :rtype: str
        """
        return self._title_en

    @title_en.setter
    def title_en(self, title_en):
        """Sets the title_en of this ImmigrantByDistrict.


        :param title_en: The title_en of this ImmigrantByDistrict.  # noqa: E501
        :type: str
        """
        if title_en is not None and len(title_en) > 255:
            raise ValueError("Invalid value for `title_en`, length must be less than or equal to `255`")  # noqa: E501

        self._title_en = title_en

    @property
    def title_ne(self):
        """Gets the title_ne of this ImmigrantByDistrict.  # noqa: E501


        :return: The title_ne of this ImmigrantByDistrict.  # noqa: E501
        :rtype: str
        """
        return self._title_ne

    @title_ne.setter
    def title_ne(self, title_ne):
        """Sets the title_ne of this ImmigrantByDistrict.


        :param title_ne: The title_ne of this ImmigrantByDistrict.  # noqa: E501
        :type: str
        """
        if title_ne is not None and len(title_ne) > 255:
            raise ValueError("Invalid value for `title_ne`, length must be less than or equal to `255`")  # noqa: E501

        self._title_ne = title_ne

    @property
    def code(self):
        """Gets the code of this ImmigrantByDistrict.  # noqa: E501


        :return: The code of this ImmigrantByDistrict.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ImmigrantByDistrict.


        :param code: The code of this ImmigrantByDistrict.  # noqa: E501
        :type: str
        """
        if code is not None and len(code) > 25:
            raise ValueError("Invalid value for `code`, length must be less than or equal to `25`")  # noqa: E501

        self._code = code

    @property
    def bbox(self):
        """Gets the bbox of this ImmigrantByDistrict.  # noqa: E501


        :return: The bbox of this ImmigrantByDistrict.  # noqa: E501
        :rtype: list[float]
        """
        return self._bbox

    @bbox.setter
    def bbox(self, bbox):
        """Sets the bbox of this ImmigrantByDistrict.


        :param bbox: The bbox of this ImmigrantByDistrict.  # noqa: E501
        :type: list[float]
        """

        self._bbox = bbox

    @property
    def centroid(self):
        """Gets the centroid of this ImmigrantByDistrict.  # noqa: E501


        :return: The centroid of this ImmigrantByDistrict.  # noqa: E501
        :rtype: str
        """
        return self._centroid

    @centroid.setter
    def centroid(self, centroid):
        """Sets the centroid of this ImmigrantByDistrict.


        :param centroid: The centroid of this ImmigrantByDistrict.  # noqa: E501
        :type: str
        """

        self._centroid = centroid

    @property
    def order(self):
        """Gets the order of this ImmigrantByDistrict.  # noqa: E501


        :return: The order of this ImmigrantByDistrict.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this ImmigrantByDistrict.


        :param order: The order of this ImmigrantByDistrict.  # noqa: E501
        :type: int
        """
        if order is not None and order > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `order`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if order is not None and order < 0:  # noqa: E501
            raise ValueError("Invalid value for `order`, must be a value greater than or equal to `0`")  # noqa: E501

        self._order = order

    @property
    def province(self):
        """Gets the province of this ImmigrantByDistrict.  # noqa: E501


        :return: The province of this ImmigrantByDistrict.  # noqa: E501
        :rtype: int
        """
        return self._province

    @province.setter
    def province(self, province):
        """Sets the province of this ImmigrantByDistrict.


        :param province: The province of this ImmigrantByDistrict.  # noqa: E501
        :type: int
        """
        if province is None:
            raise ValueError("Invalid value for `province`, must not be `None`")  # noqa: E501

        self._province = province

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImmigrantByDistrict, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImmigrantByDistrict):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
