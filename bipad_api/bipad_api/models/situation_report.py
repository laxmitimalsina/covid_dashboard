# coding: utf-8

"""
    BIPAD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SituationReport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'created_on': 'datetime',
        'modified_on': 'datetime',
        'title': 'str',
        'narration': 'str',
        'type': 'str',
        'from_date': 'date',
        'to_date': 'date',
        'created_by': 'int',
        'updated_by': 'int',
        'event': 'int'
    }

    attribute_map = {
        'id': 'id',
        'created_on': 'createdOn',
        'modified_on': 'modifiedOn',
        'title': 'title',
        'narration': 'narration',
        'type': 'type',
        'from_date': 'fromDate',
        'to_date': 'toDate',
        'created_by': 'createdBy',
        'updated_by': 'updatedBy',
        'event': 'event'
    }

    def __init__(self, id=None, created_on=None, modified_on=None, title=None, narration=None, type=None, from_date=None, to_date=None, created_by=None, updated_by=None, event=None):  # noqa: E501
        """SituationReport - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._created_on = None
        self._modified_on = None
        self._title = None
        self._narration = None
        self._type = None
        self._from_date = None
        self._to_date = None
        self._created_by = None
        self._updated_by = None
        self._event = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if created_on is not None:
            self.created_on = created_on
        if modified_on is not None:
            self.modified_on = modified_on
        self.title = title
        self.narration = narration
        self.type = type
        if from_date is not None:
            self.from_date = from_date
        if to_date is not None:
            self.to_date = to_date
        if created_by is not None:
            self.created_by = created_by
        if updated_by is not None:
            self.updated_by = updated_by
        if event is not None:
            self.event = event

    @property
    def id(self):
        """Gets the id of this SituationReport.  # noqa: E501


        :return: The id of this SituationReport.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SituationReport.


        :param id: The id of this SituationReport.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def created_on(self):
        """Gets the created_on of this SituationReport.  # noqa: E501


        :return: The created_on of this SituationReport.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this SituationReport.


        :param created_on: The created_on of this SituationReport.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def modified_on(self):
        """Gets the modified_on of this SituationReport.  # noqa: E501


        :return: The modified_on of this SituationReport.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_on

    @modified_on.setter
    def modified_on(self, modified_on):
        """Sets the modified_on of this SituationReport.


        :param modified_on: The modified_on of this SituationReport.  # noqa: E501
        :type: datetime
        """

        self._modified_on = modified_on

    @property
    def title(self):
        """Gets the title of this SituationReport.  # noqa: E501


        :return: The title of this SituationReport.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this SituationReport.


        :param title: The title of this SituationReport.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501
        if title is not None and len(title) > 255:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `255`")  # noqa: E501
        if title is not None and len(title) < 1:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")  # noqa: E501

        self._title = title

    @property
    def narration(self):
        """Gets the narration of this SituationReport.  # noqa: E501


        :return: The narration of this SituationReport.  # noqa: E501
        :rtype: str
        """
        return self._narration

    @narration.setter
    def narration(self, narration):
        """Sets the narration of this SituationReport.


        :param narration: The narration of this SituationReport.  # noqa: E501
        :type: str
        """
        if narration is None:
            raise ValueError("Invalid value for `narration`, must not be `None`")  # noqa: E501
        if narration is not None and len(narration) < 1:
            raise ValueError("Invalid value for `narration`, length must be greater than or equal to `1`")  # noqa: E501

        self._narration = narration

    @property
    def type(self):
        """Gets the type of this SituationReport.  # noqa: E501


        :return: The type of this SituationReport.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SituationReport.


        :param type: The type of this SituationReport.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["yearly", "event"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def from_date(self):
        """Gets the from_date of this SituationReport.  # noqa: E501


        :return: The from_date of this SituationReport.  # noqa: E501
        :rtype: date
        """
        return self._from_date

    @from_date.setter
    def from_date(self, from_date):
        """Sets the from_date of this SituationReport.


        :param from_date: The from_date of this SituationReport.  # noqa: E501
        :type: date
        """

        self._from_date = from_date

    @property
    def to_date(self):
        """Gets the to_date of this SituationReport.  # noqa: E501


        :return: The to_date of this SituationReport.  # noqa: E501
        :rtype: date
        """
        return self._to_date

    @to_date.setter
    def to_date(self, to_date):
        """Sets the to_date of this SituationReport.


        :param to_date: The to_date of this SituationReport.  # noqa: E501
        :type: date
        """

        self._to_date = to_date

    @property
    def created_by(self):
        """Gets the created_by of this SituationReport.  # noqa: E501


        :return: The created_by of this SituationReport.  # noqa: E501
        :rtype: int
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this SituationReport.


        :param created_by: The created_by of this SituationReport.  # noqa: E501
        :type: int
        """

        self._created_by = created_by

    @property
    def updated_by(self):
        """Gets the updated_by of this SituationReport.  # noqa: E501


        :return: The updated_by of this SituationReport.  # noqa: E501
        :rtype: int
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this SituationReport.


        :param updated_by: The updated_by of this SituationReport.  # noqa: E501
        :type: int
        """

        self._updated_by = updated_by

    @property
    def event(self):
        """Gets the event of this SituationReport.  # noqa: E501


        :return: The event of this SituationReport.  # noqa: E501
        :rtype: int
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this SituationReport.


        :param event: The event of this SituationReport.  # noqa: E501
        :type: int
        """

        self._event = event

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SituationReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SituationReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
