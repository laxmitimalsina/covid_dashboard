# coding: utf-8

"""
    BIPAD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class QuarantineInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'province': 'str',
        'district_name': 'str',
        'province_name': 'str',
        'district_name_ne': 'str',
        'province_name_ne': 'str',
        'created_on': 'datetime',
        'modified_on': 'datetime',
        'reported_on': 'date',
        'tested_count': 'int',
        'tested_today_count': 'int',
        'released_count': 'int',
        'ambulance_count': 'int',
        'quarantine_bed_count': 'int',
        'has_quarantined_sick_food_service': 'bool',
        'quarantined_count': 'int',
        'quarantined_male_count': 'int',
        'quarantined_female_count': 'int',
        'quarantined_sick_count': 'int',
        'quarantined_release_count': 'int',
        'isolated_bed_count': 'int',
        'isolated_count': 'int',
        'isolated_male_count': 'int',
        'isolated_female_count': 'int',
        'isolated_sick_count': 'int',
        'isolated_release_count': 'int',
        'swab_collected_count': 'int',
        'swab_tested_count': 'int',
        'ppe_count': 'int',
        'relief_provided_count': 'int',
        'relief_provided_today_count': 'int',
        'remarks': 'str',
        'is_verified': 'bool',
        'district': 'int'
    }

    attribute_map = {
        'id': 'id',
        'province': 'province',
        'district_name': 'districtName',
        'province_name': 'provinceName',
        'district_name_ne': 'districtNameNe',
        'province_name_ne': 'provinceNameNe',
        'created_on': 'createdOn',
        'modified_on': 'modifiedOn',
        'reported_on': 'reportedOn',
        'tested_count': 'testedCount',
        'tested_today_count': 'testedTodayCount',
        'released_count': 'releasedCount',
        'ambulance_count': 'ambulanceCount',
        'quarantine_bed_count': 'quarantineBedCount',
        'has_quarantined_sick_food_service': 'hasQuarantinedSickFoodService',
        'quarantined_count': 'quarantinedCount',
        'quarantined_male_count': 'quarantinedMaleCount',
        'quarantined_female_count': 'quarantinedFemaleCount',
        'quarantined_sick_count': 'quarantinedSickCount',
        'quarantined_release_count': 'quarantinedReleaseCount',
        'isolated_bed_count': 'isolatedBedCount',
        'isolated_count': 'isolatedCount',
        'isolated_male_count': 'isolatedMaleCount',
        'isolated_female_count': 'isolatedFemaleCount',
        'isolated_sick_count': 'isolatedSickCount',
        'isolated_release_count': 'isolatedReleaseCount',
        'swab_collected_count': 'swabCollectedCount',
        'swab_tested_count': 'swabTestedCount',
        'ppe_count': 'ppeCount',
        'relief_provided_count': 'reliefProvidedCount',
        'relief_provided_today_count': 'reliefProvidedTodayCount',
        'remarks': 'remarks',
        'is_verified': 'isVerified',
        'district': 'district'
    }

    def __init__(self, id=None, province=None, district_name=None, province_name=None, district_name_ne=None, province_name_ne=None, created_on=None, modified_on=None, reported_on=None, tested_count=None, tested_today_count=None, released_count=None, ambulance_count=None, quarantine_bed_count=None, has_quarantined_sick_food_service=None, quarantined_count=None, quarantined_male_count=None, quarantined_female_count=None, quarantined_sick_count=None, quarantined_release_count=None, isolated_bed_count=None, isolated_count=None, isolated_male_count=None, isolated_female_count=None, isolated_sick_count=None, isolated_release_count=None, swab_collected_count=None, swab_tested_count=None, ppe_count=None, relief_provided_count=None, relief_provided_today_count=None, remarks=None, is_verified=None, district=None):  # noqa: E501
        """QuarantineInfo - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._province = None
        self._district_name = None
        self._province_name = None
        self._district_name_ne = None
        self._province_name_ne = None
        self._created_on = None
        self._modified_on = None
        self._reported_on = None
        self._tested_count = None
        self._tested_today_count = None
        self._released_count = None
        self._ambulance_count = None
        self._quarantine_bed_count = None
        self._has_quarantined_sick_food_service = None
        self._quarantined_count = None
        self._quarantined_male_count = None
        self._quarantined_female_count = None
        self._quarantined_sick_count = None
        self._quarantined_release_count = None
        self._isolated_bed_count = None
        self._isolated_count = None
        self._isolated_male_count = None
        self._isolated_female_count = None
        self._isolated_sick_count = None
        self._isolated_release_count = None
        self._swab_collected_count = None
        self._swab_tested_count = None
        self._ppe_count = None
        self._relief_provided_count = None
        self._relief_provided_today_count = None
        self._remarks = None
        self._is_verified = None
        self._district = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if province is not None:
            self.province = province
        if district_name is not None:
            self.district_name = district_name
        if province_name is not None:
            self.province_name = province_name
        if district_name_ne is not None:
            self.district_name_ne = district_name_ne
        if province_name_ne is not None:
            self.province_name_ne = province_name_ne
        if created_on is not None:
            self.created_on = created_on
        if modified_on is not None:
            self.modified_on = modified_on
        if reported_on is not None:
            self.reported_on = reported_on
        self.tested_count = tested_count
        if tested_today_count is not None:
            self.tested_today_count = tested_today_count
        self.released_count = released_count
        self.ambulance_count = ambulance_count
        self.quarantine_bed_count = quarantine_bed_count
        self.has_quarantined_sick_food_service = has_quarantined_sick_food_service
        self.quarantined_count = quarantined_count
        self.quarantined_male_count = quarantined_male_count
        self.quarantined_female_count = quarantined_female_count
        self.quarantined_sick_count = quarantined_sick_count
        self.quarantined_release_count = quarantined_release_count
        self.isolated_bed_count = isolated_bed_count
        self.isolated_count = isolated_count
        self.isolated_male_count = isolated_male_count
        self.isolated_female_count = isolated_female_count
        self.isolated_sick_count = isolated_sick_count
        self.isolated_release_count = isolated_release_count
        self.swab_collected_count = swab_collected_count
        self.swab_tested_count = swab_tested_count
        self.ppe_count = ppe_count
        if relief_provided_count is not None:
            self.relief_provided_count = relief_provided_count
        if relief_provided_today_count is not None:
            self.relief_provided_today_count = relief_provided_today_count
        if remarks is not None:
            self.remarks = remarks
        if is_verified is not None:
            self.is_verified = is_verified
        self.district = district

    @property
    def id(self):
        """Gets the id of this QuarantineInfo.  # noqa: E501


        :return: The id of this QuarantineInfo.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this QuarantineInfo.


        :param id: The id of this QuarantineInfo.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def province(self):
        """Gets the province of this QuarantineInfo.  # noqa: E501


        :return: The province of this QuarantineInfo.  # noqa: E501
        :rtype: str
        """
        return self._province

    @province.setter
    def province(self, province):
        """Sets the province of this QuarantineInfo.


        :param province: The province of this QuarantineInfo.  # noqa: E501
        :type: str
        """

        self._province = province

    @property
    def district_name(self):
        """Gets the district_name of this QuarantineInfo.  # noqa: E501


        :return: The district_name of this QuarantineInfo.  # noqa: E501
        :rtype: str
        """
        return self._district_name

    @district_name.setter
    def district_name(self, district_name):
        """Sets the district_name of this QuarantineInfo.


        :param district_name: The district_name of this QuarantineInfo.  # noqa: E501
        :type: str
        """

        self._district_name = district_name

    @property
    def province_name(self):
        """Gets the province_name of this QuarantineInfo.  # noqa: E501


        :return: The province_name of this QuarantineInfo.  # noqa: E501
        :rtype: str
        """
        return self._province_name

    @province_name.setter
    def province_name(self, province_name):
        """Sets the province_name of this QuarantineInfo.


        :param province_name: The province_name of this QuarantineInfo.  # noqa: E501
        :type: str
        """

        self._province_name = province_name

    @property
    def district_name_ne(self):
        """Gets the district_name_ne of this QuarantineInfo.  # noqa: E501


        :return: The district_name_ne of this QuarantineInfo.  # noqa: E501
        :rtype: str
        """
        return self._district_name_ne

    @district_name_ne.setter
    def district_name_ne(self, district_name_ne):
        """Sets the district_name_ne of this QuarantineInfo.


        :param district_name_ne: The district_name_ne of this QuarantineInfo.  # noqa: E501
        :type: str
        """

        self._district_name_ne = district_name_ne

    @property
    def province_name_ne(self):
        """Gets the province_name_ne of this QuarantineInfo.  # noqa: E501


        :return: The province_name_ne of this QuarantineInfo.  # noqa: E501
        :rtype: str
        """
        return self._province_name_ne

    @province_name_ne.setter
    def province_name_ne(self, province_name_ne):
        """Sets the province_name_ne of this QuarantineInfo.


        :param province_name_ne: The province_name_ne of this QuarantineInfo.  # noqa: E501
        :type: str
        """

        self._province_name_ne = province_name_ne

    @property
    def created_on(self):
        """Gets the created_on of this QuarantineInfo.  # noqa: E501


        :return: The created_on of this QuarantineInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this QuarantineInfo.


        :param created_on: The created_on of this QuarantineInfo.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def modified_on(self):
        """Gets the modified_on of this QuarantineInfo.  # noqa: E501


        :return: The modified_on of this QuarantineInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_on

    @modified_on.setter
    def modified_on(self, modified_on):
        """Sets the modified_on of this QuarantineInfo.


        :param modified_on: The modified_on of this QuarantineInfo.  # noqa: E501
        :type: datetime
        """

        self._modified_on = modified_on

    @property
    def reported_on(self):
        """Gets the reported_on of this QuarantineInfo.  # noqa: E501


        :return: The reported_on of this QuarantineInfo.  # noqa: E501
        :rtype: date
        """
        return self._reported_on

    @reported_on.setter
    def reported_on(self, reported_on):
        """Sets the reported_on of this QuarantineInfo.


        :param reported_on: The reported_on of this QuarantineInfo.  # noqa: E501
        :type: date
        """

        self._reported_on = reported_on

    @property
    def tested_count(self):
        """Gets the tested_count of this QuarantineInfo.  # noqa: E501

        Within last 24 hours  # noqa: E501

        :return: The tested_count of this QuarantineInfo.  # noqa: E501
        :rtype: int
        """
        return self._tested_count

    @tested_count.setter
    def tested_count(self, tested_count):
        """Sets the tested_count of this QuarantineInfo.

        Within last 24 hours  # noqa: E501

        :param tested_count: The tested_count of this QuarantineInfo.  # noqa: E501
        :type: int
        """
        if tested_count is None:
            raise ValueError("Invalid value for `tested_count`, must not be `None`")  # noqa: E501
        if tested_count is not None and tested_count > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `tested_count`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if tested_count is not None and tested_count < 0:  # noqa: E501
            raise ValueError("Invalid value for `tested_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._tested_count = tested_count

    @property
    def tested_today_count(self):
        """Gets the tested_today_count of this QuarantineInfo.  # noqa: E501

        Within last 24 hours  # noqa: E501

        :return: The tested_today_count of this QuarantineInfo.  # noqa: E501
        :rtype: int
        """
        return self._tested_today_count

    @tested_today_count.setter
    def tested_today_count(self, tested_today_count):
        """Sets the tested_today_count of this QuarantineInfo.

        Within last 24 hours  # noqa: E501

        :param tested_today_count: The tested_today_count of this QuarantineInfo.  # noqa: E501
        :type: int
        """
        if tested_today_count is not None and tested_today_count > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `tested_today_count`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if tested_today_count is not None and tested_today_count < 0:  # noqa: E501
            raise ValueError("Invalid value for `tested_today_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._tested_today_count = tested_today_count

    @property
    def released_count(self):
        """Gets the released_count of this QuarantineInfo.  # noqa: E501

        Within last 24 hours  # noqa: E501

        :return: The released_count of this QuarantineInfo.  # noqa: E501
        :rtype: int
        """
        return self._released_count

    @released_count.setter
    def released_count(self, released_count):
        """Sets the released_count of this QuarantineInfo.

        Within last 24 hours  # noqa: E501

        :param released_count: The released_count of this QuarantineInfo.  # noqa: E501
        :type: int
        """
        if released_count is None:
            raise ValueError("Invalid value for `released_count`, must not be `None`")  # noqa: E501
        if released_count is not None and released_count > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `released_count`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if released_count is not None and released_count < 0:  # noqa: E501
            raise ValueError("Invalid value for `released_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._released_count = released_count

    @property
    def ambulance_count(self):
        """Gets the ambulance_count of this QuarantineInfo.  # noqa: E501

        As of now  # noqa: E501

        :return: The ambulance_count of this QuarantineInfo.  # noqa: E501
        :rtype: int
        """
        return self._ambulance_count

    @ambulance_count.setter
    def ambulance_count(self, ambulance_count):
        """Sets the ambulance_count of this QuarantineInfo.

        As of now  # noqa: E501

        :param ambulance_count: The ambulance_count of this QuarantineInfo.  # noqa: E501
        :type: int
        """
        if ambulance_count is None:
            raise ValueError("Invalid value for `ambulance_count`, must not be `None`")  # noqa: E501
        if ambulance_count is not None and ambulance_count > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `ambulance_count`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if ambulance_count is not None and ambulance_count < 0:  # noqa: E501
            raise ValueError("Invalid value for `ambulance_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._ambulance_count = ambulance_count

    @property
    def quarantine_bed_count(self):
        """Gets the quarantine_bed_count of this QuarantineInfo.  # noqa: E501

        As of now  # noqa: E501

        :return: The quarantine_bed_count of this QuarantineInfo.  # noqa: E501
        :rtype: int
        """
        return self._quarantine_bed_count

    @quarantine_bed_count.setter
    def quarantine_bed_count(self, quarantine_bed_count):
        """Sets the quarantine_bed_count of this QuarantineInfo.

        As of now  # noqa: E501

        :param quarantine_bed_count: The quarantine_bed_count of this QuarantineInfo.  # noqa: E501
        :type: int
        """
        if quarantine_bed_count is None:
            raise ValueError("Invalid value for `quarantine_bed_count`, must not be `None`")  # noqa: E501
        if quarantine_bed_count is not None and quarantine_bed_count > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `quarantine_bed_count`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if quarantine_bed_count is not None and quarantine_bed_count < 0:  # noqa: E501
            raise ValueError("Invalid value for `quarantine_bed_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._quarantine_bed_count = quarantine_bed_count

    @property
    def has_quarantined_sick_food_service(self):
        """Gets the has_quarantined_sick_food_service of this QuarantineInfo.  # noqa: E501


        :return: The has_quarantined_sick_food_service of this QuarantineInfo.  # noqa: E501
        :rtype: bool
        """
        return self._has_quarantined_sick_food_service

    @has_quarantined_sick_food_service.setter
    def has_quarantined_sick_food_service(self, has_quarantined_sick_food_service):
        """Sets the has_quarantined_sick_food_service of this QuarantineInfo.


        :param has_quarantined_sick_food_service: The has_quarantined_sick_food_service of this QuarantineInfo.  # noqa: E501
        :type: bool
        """
        if has_quarantined_sick_food_service is None:
            raise ValueError("Invalid value for `has_quarantined_sick_food_service`, must not be `None`")  # noqa: E501

        self._has_quarantined_sick_food_service = has_quarantined_sick_food_service

    @property
    def quarantined_count(self):
        """Gets the quarantined_count of this QuarantineInfo.  # noqa: E501

        As of now  # noqa: E501

        :return: The quarantined_count of this QuarantineInfo.  # noqa: E501
        :rtype: int
        """
        return self._quarantined_count

    @quarantined_count.setter
    def quarantined_count(self, quarantined_count):
        """Sets the quarantined_count of this QuarantineInfo.

        As of now  # noqa: E501

        :param quarantined_count: The quarantined_count of this QuarantineInfo.  # noqa: E501
        :type: int
        """
        if quarantined_count is None:
            raise ValueError("Invalid value for `quarantined_count`, must not be `None`")  # noqa: E501
        if quarantined_count is not None and quarantined_count > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `quarantined_count`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if quarantined_count is not None and quarantined_count < 0:  # noqa: E501
            raise ValueError("Invalid value for `quarantined_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._quarantined_count = quarantined_count

    @property
    def quarantined_male_count(self):
        """Gets the quarantined_male_count of this QuarantineInfo.  # noqa: E501

        As of now  # noqa: E501

        :return: The quarantined_male_count of this QuarantineInfo.  # noqa: E501
        :rtype: int
        """
        return self._quarantined_male_count

    @quarantined_male_count.setter
    def quarantined_male_count(self, quarantined_male_count):
        """Sets the quarantined_male_count of this QuarantineInfo.

        As of now  # noqa: E501

        :param quarantined_male_count: The quarantined_male_count of this QuarantineInfo.  # noqa: E501
        :type: int
        """
        if quarantined_male_count is None:
            raise ValueError("Invalid value for `quarantined_male_count`, must not be `None`")  # noqa: E501
        if quarantined_male_count is not None and quarantined_male_count > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `quarantined_male_count`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if quarantined_male_count is not None and quarantined_male_count < 0:  # noqa: E501
            raise ValueError("Invalid value for `quarantined_male_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._quarantined_male_count = quarantined_male_count

    @property
    def quarantined_female_count(self):
        """Gets the quarantined_female_count of this QuarantineInfo.  # noqa: E501

        As of now  # noqa: E501

        :return: The quarantined_female_count of this QuarantineInfo.  # noqa: E501
        :rtype: int
        """
        return self._quarantined_female_count

    @quarantined_female_count.setter
    def quarantined_female_count(self, quarantined_female_count):
        """Sets the quarantined_female_count of this QuarantineInfo.

        As of now  # noqa: E501

        :param quarantined_female_count: The quarantined_female_count of this QuarantineInfo.  # noqa: E501
        :type: int
        """
        if quarantined_female_count is None:
            raise ValueError("Invalid value for `quarantined_female_count`, must not be `None`")  # noqa: E501
        if quarantined_female_count is not None and quarantined_female_count > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `quarantined_female_count`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if quarantined_female_count is not None and quarantined_female_count < 0:  # noqa: E501
            raise ValueError("Invalid value for `quarantined_female_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._quarantined_female_count = quarantined_female_count

    @property
    def quarantined_sick_count(self):
        """Gets the quarantined_sick_count of this QuarantineInfo.  # noqa: E501

        As of now  # noqa: E501

        :return: The quarantined_sick_count of this QuarantineInfo.  # noqa: E501
        :rtype: int
        """
        return self._quarantined_sick_count

    @quarantined_sick_count.setter
    def quarantined_sick_count(self, quarantined_sick_count):
        """Sets the quarantined_sick_count of this QuarantineInfo.

        As of now  # noqa: E501

        :param quarantined_sick_count: The quarantined_sick_count of this QuarantineInfo.  # noqa: E501
        :type: int
        """
        if quarantined_sick_count is None:
            raise ValueError("Invalid value for `quarantined_sick_count`, must not be `None`")  # noqa: E501
        if quarantined_sick_count is not None and quarantined_sick_count > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `quarantined_sick_count`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if quarantined_sick_count is not None and quarantined_sick_count < 0:  # noqa: E501
            raise ValueError("Invalid value for `quarantined_sick_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._quarantined_sick_count = quarantined_sick_count

    @property
    def quarantined_release_count(self):
        """Gets the quarantined_release_count of this QuarantineInfo.  # noqa: E501

        Within last 24 hours  # noqa: E501

        :return: The quarantined_release_count of this QuarantineInfo.  # noqa: E501
        :rtype: int
        """
        return self._quarantined_release_count

    @quarantined_release_count.setter
    def quarantined_release_count(self, quarantined_release_count):
        """Sets the quarantined_release_count of this QuarantineInfo.

        Within last 24 hours  # noqa: E501

        :param quarantined_release_count: The quarantined_release_count of this QuarantineInfo.  # noqa: E501
        :type: int
        """
        if quarantined_release_count is None:
            raise ValueError("Invalid value for `quarantined_release_count`, must not be `None`")  # noqa: E501
        if quarantined_release_count is not None and quarantined_release_count > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `quarantined_release_count`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if quarantined_release_count is not None and quarantined_release_count < 0:  # noqa: E501
            raise ValueError("Invalid value for `quarantined_release_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._quarantined_release_count = quarantined_release_count

    @property
    def isolated_bed_count(self):
        """Gets the isolated_bed_count of this QuarantineInfo.  # noqa: E501

        As of now  # noqa: E501

        :return: The isolated_bed_count of this QuarantineInfo.  # noqa: E501
        :rtype: int
        """
        return self._isolated_bed_count

    @isolated_bed_count.setter
    def isolated_bed_count(self, isolated_bed_count):
        """Sets the isolated_bed_count of this QuarantineInfo.

        As of now  # noqa: E501

        :param isolated_bed_count: The isolated_bed_count of this QuarantineInfo.  # noqa: E501
        :type: int
        """
        if isolated_bed_count is None:
            raise ValueError("Invalid value for `isolated_bed_count`, must not be `None`")  # noqa: E501
        if isolated_bed_count is not None and isolated_bed_count > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `isolated_bed_count`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if isolated_bed_count is not None and isolated_bed_count < 0:  # noqa: E501
            raise ValueError("Invalid value for `isolated_bed_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._isolated_bed_count = isolated_bed_count

    @property
    def isolated_count(self):
        """Gets the isolated_count of this QuarantineInfo.  # noqa: E501

        As of now  # noqa: E501

        :return: The isolated_count of this QuarantineInfo.  # noqa: E501
        :rtype: int
        """
        return self._isolated_count

    @isolated_count.setter
    def isolated_count(self, isolated_count):
        """Sets the isolated_count of this QuarantineInfo.

        As of now  # noqa: E501

        :param isolated_count: The isolated_count of this QuarantineInfo.  # noqa: E501
        :type: int
        """
        if isolated_count is None:
            raise ValueError("Invalid value for `isolated_count`, must not be `None`")  # noqa: E501
        if isolated_count is not None and isolated_count > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `isolated_count`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if isolated_count is not None and isolated_count < 0:  # noqa: E501
            raise ValueError("Invalid value for `isolated_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._isolated_count = isolated_count

    @property
    def isolated_male_count(self):
        """Gets the isolated_male_count of this QuarantineInfo.  # noqa: E501

        As of now  # noqa: E501

        :return: The isolated_male_count of this QuarantineInfo.  # noqa: E501
        :rtype: int
        """
        return self._isolated_male_count

    @isolated_male_count.setter
    def isolated_male_count(self, isolated_male_count):
        """Sets the isolated_male_count of this QuarantineInfo.

        As of now  # noqa: E501

        :param isolated_male_count: The isolated_male_count of this QuarantineInfo.  # noqa: E501
        :type: int
        """
        if isolated_male_count is None:
            raise ValueError("Invalid value for `isolated_male_count`, must not be `None`")  # noqa: E501
        if isolated_male_count is not None and isolated_male_count > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `isolated_male_count`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if isolated_male_count is not None and isolated_male_count < 0:  # noqa: E501
            raise ValueError("Invalid value for `isolated_male_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._isolated_male_count = isolated_male_count

    @property
    def isolated_female_count(self):
        """Gets the isolated_female_count of this QuarantineInfo.  # noqa: E501

        As of now  # noqa: E501

        :return: The isolated_female_count of this QuarantineInfo.  # noqa: E501
        :rtype: int
        """
        return self._isolated_female_count

    @isolated_female_count.setter
    def isolated_female_count(self, isolated_female_count):
        """Sets the isolated_female_count of this QuarantineInfo.

        As of now  # noqa: E501

        :param isolated_female_count: The isolated_female_count of this QuarantineInfo.  # noqa: E501
        :type: int
        """
        if isolated_female_count is None:
            raise ValueError("Invalid value for `isolated_female_count`, must not be `None`")  # noqa: E501
        if isolated_female_count is not None and isolated_female_count > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `isolated_female_count`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if isolated_female_count is not None and isolated_female_count < 0:  # noqa: E501
            raise ValueError("Invalid value for `isolated_female_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._isolated_female_count = isolated_female_count

    @property
    def isolated_sick_count(self):
        """Gets the isolated_sick_count of this QuarantineInfo.  # noqa: E501

        As of now  # noqa: E501

        :return: The isolated_sick_count of this QuarantineInfo.  # noqa: E501
        :rtype: int
        """
        return self._isolated_sick_count

    @isolated_sick_count.setter
    def isolated_sick_count(self, isolated_sick_count):
        """Sets the isolated_sick_count of this QuarantineInfo.

        As of now  # noqa: E501

        :param isolated_sick_count: The isolated_sick_count of this QuarantineInfo.  # noqa: E501
        :type: int
        """
        if isolated_sick_count is None:
            raise ValueError("Invalid value for `isolated_sick_count`, must not be `None`")  # noqa: E501
        if isolated_sick_count is not None and isolated_sick_count > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `isolated_sick_count`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if isolated_sick_count is not None and isolated_sick_count < 0:  # noqa: E501
            raise ValueError("Invalid value for `isolated_sick_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._isolated_sick_count = isolated_sick_count

    @property
    def isolated_release_count(self):
        """Gets the isolated_release_count of this QuarantineInfo.  # noqa: E501

        Within last 24 hours  # noqa: E501

        :return: The isolated_release_count of this QuarantineInfo.  # noqa: E501
        :rtype: int
        """
        return self._isolated_release_count

    @isolated_release_count.setter
    def isolated_release_count(self, isolated_release_count):
        """Sets the isolated_release_count of this QuarantineInfo.

        Within last 24 hours  # noqa: E501

        :param isolated_release_count: The isolated_release_count of this QuarantineInfo.  # noqa: E501
        :type: int
        """
        if isolated_release_count is None:
            raise ValueError("Invalid value for `isolated_release_count`, must not be `None`")  # noqa: E501
        if isolated_release_count is not None and isolated_release_count > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `isolated_release_count`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if isolated_release_count is not None and isolated_release_count < 0:  # noqa: E501
            raise ValueError("Invalid value for `isolated_release_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._isolated_release_count = isolated_release_count

    @property
    def swab_collected_count(self):
        """Gets the swab_collected_count of this QuarantineInfo.  # noqa: E501

        Within last 24 hours  # noqa: E501

        :return: The swab_collected_count of this QuarantineInfo.  # noqa: E501
        :rtype: int
        """
        return self._swab_collected_count

    @swab_collected_count.setter
    def swab_collected_count(self, swab_collected_count):
        """Sets the swab_collected_count of this QuarantineInfo.

        Within last 24 hours  # noqa: E501

        :param swab_collected_count: The swab_collected_count of this QuarantineInfo.  # noqa: E501
        :type: int
        """
        if swab_collected_count is None:
            raise ValueError("Invalid value for `swab_collected_count`, must not be `None`")  # noqa: E501
        if swab_collected_count is not None and swab_collected_count > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `swab_collected_count`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if swab_collected_count is not None and swab_collected_count < 0:  # noqa: E501
            raise ValueError("Invalid value for `swab_collected_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._swab_collected_count = swab_collected_count

    @property
    def swab_tested_count(self):
        """Gets the swab_tested_count of this QuarantineInfo.  # noqa: E501

        Within last 24 hours  # noqa: E501

        :return: The swab_tested_count of this QuarantineInfo.  # noqa: E501
        :rtype: int
        """
        return self._swab_tested_count

    @swab_tested_count.setter
    def swab_tested_count(self, swab_tested_count):
        """Sets the swab_tested_count of this QuarantineInfo.

        Within last 24 hours  # noqa: E501

        :param swab_tested_count: The swab_tested_count of this QuarantineInfo.  # noqa: E501
        :type: int
        """
        if swab_tested_count is None:
            raise ValueError("Invalid value for `swab_tested_count`, must not be `None`")  # noqa: E501
        if swab_tested_count is not None and swab_tested_count > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `swab_tested_count`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if swab_tested_count is not None and swab_tested_count < 0:  # noqa: E501
            raise ValueError("Invalid value for `swab_tested_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._swab_tested_count = swab_tested_count

    @property
    def ppe_count(self):
        """Gets the ppe_count of this QuarantineInfo.  # noqa: E501

        As of now  # noqa: E501

        :return: The ppe_count of this QuarantineInfo.  # noqa: E501
        :rtype: int
        """
        return self._ppe_count

    @ppe_count.setter
    def ppe_count(self, ppe_count):
        """Sets the ppe_count of this QuarantineInfo.

        As of now  # noqa: E501

        :param ppe_count: The ppe_count of this QuarantineInfo.  # noqa: E501
        :type: int
        """
        if ppe_count is None:
            raise ValueError("Invalid value for `ppe_count`, must not be `None`")  # noqa: E501
        if ppe_count is not None and ppe_count > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `ppe_count`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if ppe_count is not None and ppe_count < 0:  # noqa: E501
            raise ValueError("Invalid value for `ppe_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._ppe_count = ppe_count

    @property
    def relief_provided_count(self):
        """Gets the relief_provided_count of this QuarantineInfo.  # noqa: E501

        Until now  # noqa: E501

        :return: The relief_provided_count of this QuarantineInfo.  # noqa: E501
        :rtype: int
        """
        return self._relief_provided_count

    @relief_provided_count.setter
    def relief_provided_count(self, relief_provided_count):
        """Sets the relief_provided_count of this QuarantineInfo.

        Until now  # noqa: E501

        :param relief_provided_count: The relief_provided_count of this QuarantineInfo.  # noqa: E501
        :type: int
        """
        if relief_provided_count is not None and relief_provided_count > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `relief_provided_count`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if relief_provided_count is not None and relief_provided_count < 0:  # noqa: E501
            raise ValueError("Invalid value for `relief_provided_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._relief_provided_count = relief_provided_count

    @property
    def relief_provided_today_count(self):
        """Gets the relief_provided_today_count of this QuarantineInfo.  # noqa: E501

        Yesterday  # noqa: E501

        :return: The relief_provided_today_count of this QuarantineInfo.  # noqa: E501
        :rtype: int
        """
        return self._relief_provided_today_count

    @relief_provided_today_count.setter
    def relief_provided_today_count(self, relief_provided_today_count):
        """Sets the relief_provided_today_count of this QuarantineInfo.

        Yesterday  # noqa: E501

        :param relief_provided_today_count: The relief_provided_today_count of this QuarantineInfo.  # noqa: E501
        :type: int
        """
        if relief_provided_today_count is not None and relief_provided_today_count > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `relief_provided_today_count`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if relief_provided_today_count is not None and relief_provided_today_count < 0:  # noqa: E501
            raise ValueError("Invalid value for `relief_provided_today_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._relief_provided_today_count = relief_provided_today_count

    @property
    def remarks(self):
        """Gets the remarks of this QuarantineInfo.  # noqa: E501


        :return: The remarks of this QuarantineInfo.  # noqa: E501
        :rtype: str
        """
        return self._remarks

    @remarks.setter
    def remarks(self, remarks):
        """Sets the remarks of this QuarantineInfo.


        :param remarks: The remarks of this QuarantineInfo.  # noqa: E501
        :type: str
        """

        self._remarks = remarks

    @property
    def is_verified(self):
        """Gets the is_verified of this QuarantineInfo.  # noqa: E501


        :return: The is_verified of this QuarantineInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_verified

    @is_verified.setter
    def is_verified(self, is_verified):
        """Sets the is_verified of this QuarantineInfo.


        :param is_verified: The is_verified of this QuarantineInfo.  # noqa: E501
        :type: bool
        """

        self._is_verified = is_verified

    @property
    def district(self):
        """Gets the district of this QuarantineInfo.  # noqa: E501


        :return: The district of this QuarantineInfo.  # noqa: E501
        :rtype: int
        """
        return self._district

    @district.setter
    def district(self, district):
        """Sets the district of this QuarantineInfo.


        :param district: The district of this QuarantineInfo.  # noqa: E501
        :type: int
        """
        if district is None:
            raise ValueError("Invalid value for `district`, must not be `None`")  # noqa: E501

        self._district = district

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QuarantineInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuarantineInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
