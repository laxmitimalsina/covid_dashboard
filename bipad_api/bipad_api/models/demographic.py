# coding: utf-8

"""
    BIPAD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Demographic(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'total_population': 'int',
        'male_population': 'int',
        'female_population': 'int',
        'household_count': 'int',
        'male_literacy_rate': 'float',
        'female_literacy_rate': 'float',
        'literacy_rate': 'float',
        'age_group_population': 'str',
        'municipality': 'int'
    }

    attribute_map = {
        'id': 'id',
        'total_population': 'totalPopulation',
        'male_population': 'malePopulation',
        'female_population': 'femalePopulation',
        'household_count': 'householdCount',
        'male_literacy_rate': 'maleLiteracyRate',
        'female_literacy_rate': 'femaleLiteracyRate',
        'literacy_rate': 'literacyRate',
        'age_group_population': 'ageGroupPopulation',
        'municipality': 'municipality'
    }

    def __init__(self, id=None, total_population=None, male_population=None, female_population=None, household_count=None, male_literacy_rate=None, female_literacy_rate=None, literacy_rate=None, age_group_population=None, municipality=None):  # noqa: E501
        """Demographic - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._total_population = None
        self._male_population = None
        self._female_population = None
        self._household_count = None
        self._male_literacy_rate = None
        self._female_literacy_rate = None
        self._literacy_rate = None
        self._age_group_population = None
        self._municipality = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.total_population = total_population
        self.male_population = male_population
        self.female_population = female_population
        self.household_count = household_count
        self.male_literacy_rate = male_literacy_rate
        self.female_literacy_rate = female_literacy_rate
        self.literacy_rate = literacy_rate
        self.age_group_population = age_group_population
        self.municipality = municipality

    @property
    def id(self):
        """Gets the id of this Demographic.  # noqa: E501


        :return: The id of this Demographic.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Demographic.


        :param id: The id of this Demographic.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def total_population(self):
        """Gets the total_population of this Demographic.  # noqa: E501


        :return: The total_population of this Demographic.  # noqa: E501
        :rtype: int
        """
        return self._total_population

    @total_population.setter
    def total_population(self, total_population):
        """Sets the total_population of this Demographic.


        :param total_population: The total_population of this Demographic.  # noqa: E501
        :type: int
        """
        if total_population is None:
            raise ValueError("Invalid value for `total_population`, must not be `None`")  # noqa: E501

        self._total_population = total_population

    @property
    def male_population(self):
        """Gets the male_population of this Demographic.  # noqa: E501


        :return: The male_population of this Demographic.  # noqa: E501
        :rtype: int
        """
        return self._male_population

    @male_population.setter
    def male_population(self, male_population):
        """Sets the male_population of this Demographic.


        :param male_population: The male_population of this Demographic.  # noqa: E501
        :type: int
        """
        if male_population is None:
            raise ValueError("Invalid value for `male_population`, must not be `None`")  # noqa: E501
        if male_population is not None and male_population > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `male_population`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if male_population is not None and male_population < 0:  # noqa: E501
            raise ValueError("Invalid value for `male_population`, must be a value greater than or equal to `0`")  # noqa: E501

        self._male_population = male_population

    @property
    def female_population(self):
        """Gets the female_population of this Demographic.  # noqa: E501


        :return: The female_population of this Demographic.  # noqa: E501
        :rtype: int
        """
        return self._female_population

    @female_population.setter
    def female_population(self, female_population):
        """Sets the female_population of this Demographic.


        :param female_population: The female_population of this Demographic.  # noqa: E501
        :type: int
        """
        if female_population is None:
            raise ValueError("Invalid value for `female_population`, must not be `None`")  # noqa: E501
        if female_population is not None and female_population > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `female_population`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if female_population is not None and female_population < 0:  # noqa: E501
            raise ValueError("Invalid value for `female_population`, must be a value greater than or equal to `0`")  # noqa: E501

        self._female_population = female_population

    @property
    def household_count(self):
        """Gets the household_count of this Demographic.  # noqa: E501


        :return: The household_count of this Demographic.  # noqa: E501
        :rtype: int
        """
        return self._household_count

    @household_count.setter
    def household_count(self, household_count):
        """Sets the household_count of this Demographic.


        :param household_count: The household_count of this Demographic.  # noqa: E501
        :type: int
        """
        if household_count is None:
            raise ValueError("Invalid value for `household_count`, must not be `None`")  # noqa: E501
        if household_count is not None and household_count > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `household_count`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if household_count is not None and household_count < 0:  # noqa: E501
            raise ValueError("Invalid value for `household_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._household_count = household_count

    @property
    def male_literacy_rate(self):
        """Gets the male_literacy_rate of this Demographic.  # noqa: E501


        :return: The male_literacy_rate of this Demographic.  # noqa: E501
        :rtype: float
        """
        return self._male_literacy_rate

    @male_literacy_rate.setter
    def male_literacy_rate(self, male_literacy_rate):
        """Sets the male_literacy_rate of this Demographic.


        :param male_literacy_rate: The male_literacy_rate of this Demographic.  # noqa: E501
        :type: float
        """
        if male_literacy_rate is None:
            raise ValueError("Invalid value for `male_literacy_rate`, must not be `None`")  # noqa: E501

        self._male_literacy_rate = male_literacy_rate

    @property
    def female_literacy_rate(self):
        """Gets the female_literacy_rate of this Demographic.  # noqa: E501


        :return: The female_literacy_rate of this Demographic.  # noqa: E501
        :rtype: float
        """
        return self._female_literacy_rate

    @female_literacy_rate.setter
    def female_literacy_rate(self, female_literacy_rate):
        """Sets the female_literacy_rate of this Demographic.


        :param female_literacy_rate: The female_literacy_rate of this Demographic.  # noqa: E501
        :type: float
        """
        if female_literacy_rate is None:
            raise ValueError("Invalid value for `female_literacy_rate`, must not be `None`")  # noqa: E501

        self._female_literacy_rate = female_literacy_rate

    @property
    def literacy_rate(self):
        """Gets the literacy_rate of this Demographic.  # noqa: E501


        :return: The literacy_rate of this Demographic.  # noqa: E501
        :rtype: float
        """
        return self._literacy_rate

    @literacy_rate.setter
    def literacy_rate(self, literacy_rate):
        """Sets the literacy_rate of this Demographic.


        :param literacy_rate: The literacy_rate of this Demographic.  # noqa: E501
        :type: float
        """
        if literacy_rate is None:
            raise ValueError("Invalid value for `literacy_rate`, must not be `None`")  # noqa: E501

        self._literacy_rate = literacy_rate

    @property
    def age_group_population(self):
        """Gets the age_group_population of this Demographic.  # noqa: E501


        :return: The age_group_population of this Demographic.  # noqa: E501
        :rtype: str
        """
        return self._age_group_population

    @age_group_population.setter
    def age_group_population(self, age_group_population):
        """Sets the age_group_population of this Demographic.


        :param age_group_population: The age_group_population of this Demographic.  # noqa: E501
        :type: str
        """
        if age_group_population is None:
            raise ValueError("Invalid value for `age_group_population`, must not be `None`")  # noqa: E501

        self._age_group_population = age_group_population

    @property
    def municipality(self):
        """Gets the municipality of this Demographic.  # noqa: E501


        :return: The municipality of this Demographic.  # noqa: E501
        :rtype: int
        """
        return self._municipality

    @municipality.setter
    def municipality(self, municipality):
        """Sets the municipality of this Demographic.


        :param municipality: The municipality of this Demographic.  # noqa: E501
        :type: int
        """
        if municipality is None:
            raise ValueError("Invalid value for `municipality`, must not be `None`")  # noqa: E501

        self._municipality = municipality

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Demographic, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Demographic):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
