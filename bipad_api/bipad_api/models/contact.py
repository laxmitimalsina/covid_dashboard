# coding: utf-8

"""
    BIPAD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Contact(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'image': 'str',
        'position': 'str',
        'email': 'str',
        'work_number': 'str',
        'mobile_number': 'str',
        'is_drr_focal_person': 'bool',
        'committee': 'str',
        'community_address': 'str',
        'point': 'str',
        'organization': 'int',
        'province': 'int',
        'district': 'int',
        'municipality': 'int',
        'ward': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'image': 'image',
        'position': 'position',
        'email': 'email',
        'work_number': 'workNumber',
        'mobile_number': 'mobileNumber',
        'is_drr_focal_person': 'isDrrFocalPerson',
        'committee': 'committee',
        'community_address': 'communityAddress',
        'point': 'point',
        'organization': 'organization',
        'province': 'province',
        'district': 'district',
        'municipality': 'municipality',
        'ward': 'ward'
    }

    def __init__(self, id=None, name=None, image=None, position=None, email=None, work_number=None, mobile_number=None, is_drr_focal_person=None, committee=None, community_address=None, point=None, organization=None, province=None, district=None, municipality=None, ward=None):  # noqa: E501
        """Contact - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._image = None
        self._position = None
        self._email = None
        self._work_number = None
        self._mobile_number = None
        self._is_drr_focal_person = None
        self._committee = None
        self._community_address = None
        self._point = None
        self._organization = None
        self._province = None
        self._district = None
        self._municipality = None
        self._ward = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        if image is not None:
            self.image = image
        self.position = position
        if email is not None:
            self.email = email
        if work_number is not None:
            self.work_number = work_number
        if mobile_number is not None:
            self.mobile_number = mobile_number
        if is_drr_focal_person is not None:
            self.is_drr_focal_person = is_drr_focal_person
        self.committee = committee
        if community_address is not None:
            self.community_address = community_address
        if point is not None:
            self.point = point
        if organization is not None:
            self.organization = organization
        if province is not None:
            self.province = province
        if district is not None:
            self.district = district
        if municipality is not None:
            self.municipality = municipality
        if ward is not None:
            self.ward = ward

    @property
    def id(self):
        """Gets the id of this Contact.  # noqa: E501


        :return: The id of this Contact.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Contact.


        :param id: The id of this Contact.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Contact.  # noqa: E501


        :return: The name of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Contact.


        :param name: The name of this Contact.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def image(self):
        """Gets the image of this Contact.  # noqa: E501


        :return: The image of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Contact.


        :param image: The image of this Contact.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def position(self):
        """Gets the position of this Contact.  # noqa: E501


        :return: The position of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this Contact.


        :param position: The position of this Contact.  # noqa: E501
        :type: str
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")  # noqa: E501
        if position is not None and len(position) > 255:
            raise ValueError("Invalid value for `position`, length must be less than or equal to `255`")  # noqa: E501
        if position is not None and len(position) < 1:
            raise ValueError("Invalid value for `position`, length must be greater than or equal to `1`")  # noqa: E501

        self._position = position

    @property
    def email(self):
        """Gets the email of this Contact.  # noqa: E501


        :return: The email of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Contact.


        :param email: The email of this Contact.  # noqa: E501
        :type: str
        """
        if email is not None and len(email) > 254:
            raise ValueError("Invalid value for `email`, length must be less than or equal to `254`")  # noqa: E501

        self._email = email

    @property
    def work_number(self):
        """Gets the work_number of this Contact.  # noqa: E501


        :return: The work_number of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._work_number

    @work_number.setter
    def work_number(self, work_number):
        """Sets the work_number of this Contact.


        :param work_number: The work_number of this Contact.  # noqa: E501
        :type: str
        """
        if work_number is not None and len(work_number) > 17:
            raise ValueError("Invalid value for `work_number`, length must be less than or equal to `17`")  # noqa: E501

        self._work_number = work_number

    @property
    def mobile_number(self):
        """Gets the mobile_number of this Contact.  # noqa: E501


        :return: The mobile_number of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._mobile_number

    @mobile_number.setter
    def mobile_number(self, mobile_number):
        """Sets the mobile_number of this Contact.


        :param mobile_number: The mobile_number of this Contact.  # noqa: E501
        :type: str
        """
        if mobile_number is not None and len(mobile_number) > 17:
            raise ValueError("Invalid value for `mobile_number`, length must be less than or equal to `17`")  # noqa: E501

        self._mobile_number = mobile_number

    @property
    def is_drr_focal_person(self):
        """Gets the is_drr_focal_person of this Contact.  # noqa: E501


        :return: The is_drr_focal_person of this Contact.  # noqa: E501
        :rtype: bool
        """
        return self._is_drr_focal_person

    @is_drr_focal_person.setter
    def is_drr_focal_person(self, is_drr_focal_person):
        """Sets the is_drr_focal_person of this Contact.


        :param is_drr_focal_person: The is_drr_focal_person of this Contact.  # noqa: E501
        :type: bool
        """

        self._is_drr_focal_person = is_drr_focal_person

    @property
    def committee(self):
        """Gets the committee of this Contact.  # noqa: E501


        :return: The committee of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._committee

    @committee.setter
    def committee(self, committee):
        """Sets the committee of this Contact.


        :param committee: The committee of this Contact.  # noqa: E501
        :type: str
        """
        if committee is None:
            raise ValueError("Invalid value for `committee`, must not be `None`")  # noqa: E501
        allowed_values = ["PDMC", "DDMC", "LDMC", "WDMC", "CDMC", "non_committee"]  # noqa: E501
        if committee not in allowed_values:
            raise ValueError(
                "Invalid value for `committee` ({0}), must be one of {1}"  # noqa: E501
                .format(committee, allowed_values)
            )

        self._committee = committee

    @property
    def community_address(self):
        """Gets the community_address of this Contact.  # noqa: E501


        :return: The community_address of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._community_address

    @community_address.setter
    def community_address(self, community_address):
        """Sets the community_address of this Contact.


        :param community_address: The community_address of this Contact.  # noqa: E501
        :type: str
        """
        if community_address is not None and len(community_address) > 255:
            raise ValueError("Invalid value for `community_address`, length must be less than or equal to `255`")  # noqa: E501

        self._community_address = community_address

    @property
    def point(self):
        """Gets the point of this Contact.  # noqa: E501


        :return: The point of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._point

    @point.setter
    def point(self, point):
        """Sets the point of this Contact.


        :param point: The point of this Contact.  # noqa: E501
        :type: str
        """

        self._point = point

    @property
    def organization(self):
        """Gets the organization of this Contact.  # noqa: E501


        :return: The organization of this Contact.  # noqa: E501
        :rtype: int
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this Contact.


        :param organization: The organization of this Contact.  # noqa: E501
        :type: int
        """

        self._organization = organization

    @property
    def province(self):
        """Gets the province of this Contact.  # noqa: E501


        :return: The province of this Contact.  # noqa: E501
        :rtype: int
        """
        return self._province

    @province.setter
    def province(self, province):
        """Sets the province of this Contact.


        :param province: The province of this Contact.  # noqa: E501
        :type: int
        """

        self._province = province

    @property
    def district(self):
        """Gets the district of this Contact.  # noqa: E501


        :return: The district of this Contact.  # noqa: E501
        :rtype: int
        """
        return self._district

    @district.setter
    def district(self, district):
        """Sets the district of this Contact.


        :param district: The district of this Contact.  # noqa: E501
        :type: int
        """

        self._district = district

    @property
    def municipality(self):
        """Gets the municipality of this Contact.  # noqa: E501


        :return: The municipality of this Contact.  # noqa: E501
        :rtype: int
        """
        return self._municipality

    @municipality.setter
    def municipality(self, municipality):
        """Sets the municipality of this Contact.


        :param municipality: The municipality of this Contact.  # noqa: E501
        :type: int
        """

        self._municipality = municipality

    @property
    def ward(self):
        """Gets the ward of this Contact.  # noqa: E501


        :return: The ward of this Contact.  # noqa: E501
        :rtype: int
        """
        return self._ward

    @ward.setter
    def ward(self, ward):
        """Sets the ward of this Contact.


        :param ward: The ward of this Contact.  # noqa: E501
        :type: int
        """

        self._ward = ward

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Contact, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Contact):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
