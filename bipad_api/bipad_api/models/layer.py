# coding: utf-8

"""
    BIPAD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Layer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'title': 'str',
        'category': 'str',
        'type': 'str',
        'legend_title': 'str',
        'legend_description': 'str',
        'description': 'str',
        'workspace': 'str',
        'layername': 'str',
        'public': 'bool',
        'order': 'int',
        'group': 'int',
        'hazard': 'int'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'category': 'category',
        'type': 'type',
        'legend_title': 'legendTitle',
        'legend_description': 'legendDescription',
        'description': 'description',
        'workspace': 'workspace',
        'layername': 'layername',
        'public': 'public',
        'order': 'order',
        'group': 'group',
        'hazard': 'hazard'
    }

    def __init__(self, id=None, title=None, category=None, type=None, legend_title=None, legend_description=None, description=None, workspace=None, layername=None, public=None, order=None, group=None, hazard=None):  # noqa: E501
        """Layer - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._title = None
        self._category = None
        self._type = None
        self._legend_title = None
        self._legend_description = None
        self._description = None
        self._workspace = None
        self._layername = None
        self._public = None
        self._order = None
        self._group = None
        self._hazard = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.title = title
        self.category = category
        self.type = type
        if legend_title is not None:
            self.legend_title = legend_title
        if legend_description is not None:
            self.legend_description = legend_description
        if description is not None:
            self.description = description
        if workspace is not None:
            self.workspace = workspace
        self.layername = layername
        if public is not None:
            self.public = public
        if order is not None:
            self.order = order
        if group is not None:
            self.group = group
        if hazard is not None:
            self.hazard = hazard

    @property
    def id(self):
        """Gets the id of this Layer.  # noqa: E501


        :return: The id of this Layer.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Layer.


        :param id: The id of this Layer.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this Layer.  # noqa: E501


        :return: The title of this Layer.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Layer.


        :param title: The title of this Layer.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501
        if title is not None and len(title) > 50:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `50`")  # noqa: E501
        if title is not None and len(title) < 1:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")  # noqa: E501

        self._title = title

    @property
    def category(self):
        """Gets the category of this Layer.  # noqa: E501


        :return: The category of this Layer.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Layer.


        :param category: The category of this Layer.  # noqa: E501
        :type: str
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")  # noqa: E501
        allowed_values = ["hazard", "exposure", "vulnerability", "risk", "capacity_resource", "realtime", "climate_change", "other"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"  # noqa: E501
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def type(self):
        """Gets the type of this Layer.  # noqa: E501


        :return: The type of this Layer.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Layer.


        :param type: The type of this Layer.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["vector", "raster", "custom"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def legend_title(self):
        """Gets the legend_title of this Layer.  # noqa: E501


        :return: The legend_title of this Layer.  # noqa: E501
        :rtype: str
        """
        return self._legend_title

    @legend_title.setter
    def legend_title(self, legend_title):
        """Sets the legend_title of this Layer.


        :param legend_title: The legend_title of this Layer.  # noqa: E501
        :type: str
        """
        if legend_title is not None and len(legend_title) > 50:
            raise ValueError("Invalid value for `legend_title`, length must be less than or equal to `50`")  # noqa: E501

        self._legend_title = legend_title

    @property
    def legend_description(self):
        """Gets the legend_description of this Layer.  # noqa: E501


        :return: The legend_description of this Layer.  # noqa: E501
        :rtype: str
        """
        return self._legend_description

    @legend_description.setter
    def legend_description(self, legend_description):
        """Sets the legend_description of this Layer.


        :param legend_description: The legend_description of this Layer.  # noqa: E501
        :type: str
        """

        self._legend_description = legend_description

    @property
    def description(self):
        """Gets the description of this Layer.  # noqa: E501


        :return: The description of this Layer.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Layer.


        :param description: The description of this Layer.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def workspace(self):
        """Gets the workspace of this Layer.  # noqa: E501


        :return: The workspace of this Layer.  # noqa: E501
        :rtype: str
        """
        return self._workspace

    @workspace.setter
    def workspace(self, workspace):
        """Sets the workspace of this Layer.


        :param workspace: The workspace of this Layer.  # noqa: E501
        :type: str
        """
        if workspace is not None and len(workspace) > 50:
            raise ValueError("Invalid value for `workspace`, length must be less than or equal to `50`")  # noqa: E501

        self._workspace = workspace

    @property
    def layername(self):
        """Gets the layername of this Layer.  # noqa: E501


        :return: The layername of this Layer.  # noqa: E501
        :rtype: str
        """
        return self._layername

    @layername.setter
    def layername(self, layername):
        """Sets the layername of this Layer.


        :param layername: The layername of this Layer.  # noqa: E501
        :type: str
        """
        if layername is None:
            raise ValueError("Invalid value for `layername`, must not be `None`")  # noqa: E501
        if layername is not None and len(layername) > 50:
            raise ValueError("Invalid value for `layername`, length must be less than or equal to `50`")  # noqa: E501
        if layername is not None and len(layername) < 1:
            raise ValueError("Invalid value for `layername`, length must be greater than or equal to `1`")  # noqa: E501

        self._layername = layername

    @property
    def public(self):
        """Gets the public of this Layer.  # noqa: E501


        :return: The public of this Layer.  # noqa: E501
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this Layer.


        :param public: The public of this Layer.  # noqa: E501
        :type: bool
        """

        self._public = public

    @property
    def order(self):
        """Gets the order of this Layer.  # noqa: E501


        :return: The order of this Layer.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this Layer.


        :param order: The order of this Layer.  # noqa: E501
        :type: int
        """
        if order is not None and order > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `order`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if order is not None and order < 0:  # noqa: E501
            raise ValueError("Invalid value for `order`, must be a value greater than or equal to `0`")  # noqa: E501

        self._order = order

    @property
    def group(self):
        """Gets the group of this Layer.  # noqa: E501


        :return: The group of this Layer.  # noqa: E501
        :rtype: int
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this Layer.


        :param group: The group of this Layer.  # noqa: E501
        :type: int
        """

        self._group = group

    @property
    def hazard(self):
        """Gets the hazard of this Layer.  # noqa: E501


        :return: The hazard of this Layer.  # noqa: E501
        :rtype: int
        """
        return self._hazard

    @hazard.setter
    def hazard(self, hazard):
        """Sets the hazard of this Layer.


        :param hazard: The hazard of this Layer.  # noqa: E501
        :type: int
        """

        self._hazard = hazard

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Layer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Layer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
