# coding: utf-8

"""
    BIPAD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Temperature(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'created_on': 'datetime',
        'modified_on': 'datetime',
        'region': 'str',
        'rcp45': 'str',
        'sd_rcp45': 'str',
        'rcp85': 'str',
        'sd_rcp85': 'str',
        'district': 'int'
    }

    attribute_map = {
        'id': 'id',
        'created_on': 'createdOn',
        'modified_on': 'modifiedOn',
        'region': 'region',
        'rcp45': 'rcp45',
        'sd_rcp45': 'sdRcp45',
        'rcp85': 'rcp85',
        'sd_rcp85': 'sdRcp85',
        'district': 'district'
    }

    def __init__(self, id=None, created_on=None, modified_on=None, region=None, rcp45=None, sd_rcp45=None, rcp85=None, sd_rcp85=None, district=None):  # noqa: E501
        """Temperature - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._created_on = None
        self._modified_on = None
        self._region = None
        self._rcp45 = None
        self._sd_rcp45 = None
        self._rcp85 = None
        self._sd_rcp85 = None
        self._district = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if created_on is not None:
            self.created_on = created_on
        if modified_on is not None:
            self.modified_on = modified_on
        self.region = region
        self.rcp45 = rcp45
        self.sd_rcp45 = sd_rcp45
        self.rcp85 = rcp85
        self.sd_rcp85 = sd_rcp85
        if district is not None:
            self.district = district

    @property
    def id(self):
        """Gets the id of this Temperature.  # noqa: E501


        :return: The id of this Temperature.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Temperature.


        :param id: The id of this Temperature.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def created_on(self):
        """Gets the created_on of this Temperature.  # noqa: E501


        :return: The created_on of this Temperature.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this Temperature.


        :param created_on: The created_on of this Temperature.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def modified_on(self):
        """Gets the modified_on of this Temperature.  # noqa: E501


        :return: The modified_on of this Temperature.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_on

    @modified_on.setter
    def modified_on(self, modified_on):
        """Sets the modified_on of this Temperature.


        :param modified_on: The modified_on of this Temperature.  # noqa: E501
        :type: datetime
        """

        self._modified_on = modified_on

    @property
    def region(self):
        """Gets the region of this Temperature.  # noqa: E501


        :return: The region of this Temperature.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Temperature.


        :param region: The region of this Temperature.  # noqa: E501
        :type: str
        """
        if region is None:
            raise ValueError("Invalid value for `region`, must not be `None`")  # noqa: E501
        allowed_values = ["national", "district"]  # noqa: E501
        if region not in allowed_values:
            raise ValueError(
                "Invalid value for `region` ({0}), must be one of {1}"  # noqa: E501
                .format(region, allowed_values)
            )

        self._region = region

    @property
    def rcp45(self):
        """Gets the rcp45 of this Temperature.  # noqa: E501


        :return: The rcp45 of this Temperature.  # noqa: E501
        :rtype: str
        """
        return self._rcp45

    @rcp45.setter
    def rcp45(self, rcp45):
        """Sets the rcp45 of this Temperature.


        :param rcp45: The rcp45 of this Temperature.  # noqa: E501
        :type: str
        """
        if rcp45 is None:
            raise ValueError("Invalid value for `rcp45`, must not be `None`")  # noqa: E501

        self._rcp45 = rcp45

    @property
    def sd_rcp45(self):
        """Gets the sd_rcp45 of this Temperature.  # noqa: E501


        :return: The sd_rcp45 of this Temperature.  # noqa: E501
        :rtype: str
        """
        return self._sd_rcp45

    @sd_rcp45.setter
    def sd_rcp45(self, sd_rcp45):
        """Sets the sd_rcp45 of this Temperature.


        :param sd_rcp45: The sd_rcp45 of this Temperature.  # noqa: E501
        :type: str
        """
        if sd_rcp45 is None:
            raise ValueError("Invalid value for `sd_rcp45`, must not be `None`")  # noqa: E501

        self._sd_rcp45 = sd_rcp45

    @property
    def rcp85(self):
        """Gets the rcp85 of this Temperature.  # noqa: E501


        :return: The rcp85 of this Temperature.  # noqa: E501
        :rtype: str
        """
        return self._rcp85

    @rcp85.setter
    def rcp85(self, rcp85):
        """Sets the rcp85 of this Temperature.


        :param rcp85: The rcp85 of this Temperature.  # noqa: E501
        :type: str
        """
        if rcp85 is None:
            raise ValueError("Invalid value for `rcp85`, must not be `None`")  # noqa: E501

        self._rcp85 = rcp85

    @property
    def sd_rcp85(self):
        """Gets the sd_rcp85 of this Temperature.  # noqa: E501


        :return: The sd_rcp85 of this Temperature.  # noqa: E501
        :rtype: str
        """
        return self._sd_rcp85

    @sd_rcp85.setter
    def sd_rcp85(self, sd_rcp85):
        """Sets the sd_rcp85 of this Temperature.


        :param sd_rcp85: The sd_rcp85 of this Temperature.  # noqa: E501
        :type: str
        """
        if sd_rcp85 is None:
            raise ValueError("Invalid value for `sd_rcp85`, must not be `None`")  # noqa: E501

        self._sd_rcp85 = sd_rcp85

    @property
    def district(self):
        """Gets the district of this Temperature.  # noqa: E501


        :return: The district of this Temperature.  # noqa: E501
        :rtype: int
        """
        return self._district

    @district.setter
    def district(self, district):
        """Sets the district of this Temperature.


        :param district: The district of this Temperature.  # noqa: E501
        :type: int
        """

        self._district = district

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Temperature, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Temperature):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
