# coding: utf-8

"""
    BIPAD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Immigrant(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'first_name': 'str',
        'middle_name': 'str',
        'last_name': 'str',
        'phone': 'str',
        'phone_owner': 'str',
        'phone_owner_relation': 'str',
        'passport_id': 'str',
        'passport_file': 'str',
        'citizenship_id': 'str',
        'citizenship_file': 'str',
        'province': 'str',
        'district': 'str',
        'travel_histories': 'list[TravelHistory]',
        'tole': 'str',
        'age': 'int',
        'gender': 'str',
        'is_location_precise': 'bool',
        'point': 'str',
        'is_quarantined': 'bool',
        'quarantined_days': 'int',
        'quarantined_place': 'str',
        'fever_level': 'str',
        'has_dry_cough': 'bool',
        'has_shortness_of_breath': 'bool',
        'municipality': 'int',
        'ward': 'int'
    }

    attribute_map = {
        'id': 'id',
        'first_name': 'firstName',
        'middle_name': 'middleName',
        'last_name': 'lastName',
        'phone': 'phone',
        'phone_owner': 'phoneOwner',
        'phone_owner_relation': 'phoneOwnerRelation',
        'passport_id': 'passportId',
        'passport_file': 'passportFile',
        'citizenship_id': 'citizenshipId',
        'citizenship_file': 'citizenshipFile',
        'province': 'province',
        'district': 'district',
        'travel_histories': 'travelHistories',
        'tole': 'tole',
        'age': 'age',
        'gender': 'gender',
        'is_location_precise': 'isLocationPrecise',
        'point': 'point',
        'is_quarantined': 'isQuarantined',
        'quarantined_days': 'quarantinedDays',
        'quarantined_place': 'quarantinedPlace',
        'fever_level': 'feverLevel',
        'has_dry_cough': 'hasDryCough',
        'has_shortness_of_breath': 'hasShortnessOfBreath',
        'municipality': 'municipality',
        'ward': 'ward'
    }

    def __init__(self, id=None, first_name=None, middle_name=None, last_name=None, phone=None, phone_owner=None, phone_owner_relation=None, passport_id=None, passport_file=None, citizenship_id=None, citizenship_file=None, province=None, district=None, travel_histories=None, tole=None, age=None, gender=None, is_location_precise=None, point=None, is_quarantined=None, quarantined_days=None, quarantined_place=None, fever_level=None, has_dry_cough=None, has_shortness_of_breath=None, municipality=None, ward=None):  # noqa: E501
        """Immigrant - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._first_name = None
        self._middle_name = None
        self._last_name = None
        self._phone = None
        self._phone_owner = None
        self._phone_owner_relation = None
        self._passport_id = None
        self._passport_file = None
        self._citizenship_id = None
        self._citizenship_file = None
        self._province = None
        self._district = None
        self._travel_histories = None
        self._tole = None
        self._age = None
        self._gender = None
        self._is_location_precise = None
        self._point = None
        self._is_quarantined = None
        self._quarantined_days = None
        self._quarantined_place = None
        self._fever_level = None
        self._has_dry_cough = None
        self._has_shortness_of_breath = None
        self._municipality = None
        self._ward = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.first_name = first_name
        if middle_name is not None:
            self.middle_name = middle_name
        self.last_name = last_name
        self.phone = phone
        if phone_owner is not None:
            self.phone_owner = phone_owner
        if phone_owner_relation is not None:
            self.phone_owner_relation = phone_owner_relation
        if passport_id is not None:
            self.passport_id = passport_id
        if passport_file is not None:
            self.passport_file = passport_file
        if citizenship_id is not None:
            self.citizenship_id = citizenship_id
        if citizenship_file is not None:
            self.citizenship_file = citizenship_file
        if province is not None:
            self.province = province
        if district is not None:
            self.district = district
        self.travel_histories = travel_histories
        if tole is not None:
            self.tole = tole
        self.age = age
        self.gender = gender
        self.is_location_precise = is_location_precise
        if point is not None:
            self.point = point
        self.is_quarantined = is_quarantined
        if quarantined_days is not None:
            self.quarantined_days = quarantined_days
        if quarantined_place is not None:
            self.quarantined_place = quarantined_place
        self.fever_level = fever_level
        self.has_dry_cough = has_dry_cough
        self.has_shortness_of_breath = has_shortness_of_breath
        self.municipality = municipality
        if ward is not None:
            self.ward = ward

    @property
    def id(self):
        """Gets the id of this Immigrant.  # noqa: E501


        :return: The id of this Immigrant.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Immigrant.


        :param id: The id of this Immigrant.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def first_name(self):
        """Gets the first_name of this Immigrant.  # noqa: E501


        :return: The first_name of this Immigrant.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Immigrant.


        :param first_name: The first_name of this Immigrant.  # noqa: E501
        :type: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501
        if first_name is not None and len(first_name) < 1:
            raise ValueError("Invalid value for `first_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._first_name = first_name

    @property
    def middle_name(self):
        """Gets the middle_name of this Immigrant.  # noqa: E501


        :return: The middle_name of this Immigrant.  # noqa: E501
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this Immigrant.


        :param middle_name: The middle_name of this Immigrant.  # noqa: E501
        :type: str
        """

        self._middle_name = middle_name

    @property
    def last_name(self):
        """Gets the last_name of this Immigrant.  # noqa: E501


        :return: The last_name of this Immigrant.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Immigrant.


        :param last_name: The last_name of this Immigrant.  # noqa: E501
        :type: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501
        if last_name is not None and len(last_name) < 1:
            raise ValueError("Invalid value for `last_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._last_name = last_name

    @property
    def phone(self):
        """Gets the phone of this Immigrant.  # noqa: E501


        :return: The phone of this Immigrant.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Immigrant.


        :param phone: The phone of this Immigrant.  # noqa: E501
        :type: str
        """
        if phone is None:
            raise ValueError("Invalid value for `phone`, must not be `None`")  # noqa: E501
        if phone is not None and len(phone) < 1:
            raise ValueError("Invalid value for `phone`, length must be greater than or equal to `1`")  # noqa: E501

        self._phone = phone

    @property
    def phone_owner(self):
        """Gets the phone_owner of this Immigrant.  # noqa: E501


        :return: The phone_owner of this Immigrant.  # noqa: E501
        :rtype: str
        """
        return self._phone_owner

    @phone_owner.setter
    def phone_owner(self, phone_owner):
        """Sets the phone_owner of this Immigrant.


        :param phone_owner: The phone_owner of this Immigrant.  # noqa: E501
        :type: str
        """

        self._phone_owner = phone_owner

    @property
    def phone_owner_relation(self):
        """Gets the phone_owner_relation of this Immigrant.  # noqa: E501


        :return: The phone_owner_relation of this Immigrant.  # noqa: E501
        :rtype: str
        """
        return self._phone_owner_relation

    @phone_owner_relation.setter
    def phone_owner_relation(self, phone_owner_relation):
        """Sets the phone_owner_relation of this Immigrant.


        :param phone_owner_relation: The phone_owner_relation of this Immigrant.  # noqa: E501
        :type: str
        """

        self._phone_owner_relation = phone_owner_relation

    @property
    def passport_id(self):
        """Gets the passport_id of this Immigrant.  # noqa: E501


        :return: The passport_id of this Immigrant.  # noqa: E501
        :rtype: str
        """
        return self._passport_id

    @passport_id.setter
    def passport_id(self, passport_id):
        """Sets the passport_id of this Immigrant.


        :param passport_id: The passport_id of this Immigrant.  # noqa: E501
        :type: str
        """

        self._passport_id = passport_id

    @property
    def passport_file(self):
        """Gets the passport_file of this Immigrant.  # noqa: E501


        :return: The passport_file of this Immigrant.  # noqa: E501
        :rtype: str
        """
        return self._passport_file

    @passport_file.setter
    def passport_file(self, passport_file):
        """Sets the passport_file of this Immigrant.


        :param passport_file: The passport_file of this Immigrant.  # noqa: E501
        :type: str
        """

        self._passport_file = passport_file

    @property
    def citizenship_id(self):
        """Gets the citizenship_id of this Immigrant.  # noqa: E501


        :return: The citizenship_id of this Immigrant.  # noqa: E501
        :rtype: str
        """
        return self._citizenship_id

    @citizenship_id.setter
    def citizenship_id(self, citizenship_id):
        """Sets the citizenship_id of this Immigrant.


        :param citizenship_id: The citizenship_id of this Immigrant.  # noqa: E501
        :type: str
        """

        self._citizenship_id = citizenship_id

    @property
    def citizenship_file(self):
        """Gets the citizenship_file of this Immigrant.  # noqa: E501


        :return: The citizenship_file of this Immigrant.  # noqa: E501
        :rtype: str
        """
        return self._citizenship_file

    @citizenship_file.setter
    def citizenship_file(self, citizenship_file):
        """Sets the citizenship_file of this Immigrant.


        :param citizenship_file: The citizenship_file of this Immigrant.  # noqa: E501
        :type: str
        """

        self._citizenship_file = citizenship_file

    @property
    def province(self):
        """Gets the province of this Immigrant.  # noqa: E501


        :return: The province of this Immigrant.  # noqa: E501
        :rtype: str
        """
        return self._province

    @province.setter
    def province(self, province):
        """Sets the province of this Immigrant.


        :param province: The province of this Immigrant.  # noqa: E501
        :type: str
        """

        self._province = province

    @property
    def district(self):
        """Gets the district of this Immigrant.  # noqa: E501


        :return: The district of this Immigrant.  # noqa: E501
        :rtype: str
        """
        return self._district

    @district.setter
    def district(self, district):
        """Sets the district of this Immigrant.


        :param district: The district of this Immigrant.  # noqa: E501
        :type: str
        """

        self._district = district

    @property
    def travel_histories(self):
        """Gets the travel_histories of this Immigrant.  # noqa: E501


        :return: The travel_histories of this Immigrant.  # noqa: E501
        :rtype: list[TravelHistory]
        """
        return self._travel_histories

    @travel_histories.setter
    def travel_histories(self, travel_histories):
        """Sets the travel_histories of this Immigrant.


        :param travel_histories: The travel_histories of this Immigrant.  # noqa: E501
        :type: list[TravelHistory]
        """
        if travel_histories is None:
            raise ValueError("Invalid value for `travel_histories`, must not be `None`")  # noqa: E501

        self._travel_histories = travel_histories

    @property
    def tole(self):
        """Gets the tole of this Immigrant.  # noqa: E501


        :return: The tole of this Immigrant.  # noqa: E501
        :rtype: str
        """
        return self._tole

    @tole.setter
    def tole(self, tole):
        """Sets the tole of this Immigrant.


        :param tole: The tole of this Immigrant.  # noqa: E501
        :type: str
        """

        self._tole = tole

    @property
    def age(self):
        """Gets the age of this Immigrant.  # noqa: E501


        :return: The age of this Immigrant.  # noqa: E501
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this Immigrant.


        :param age: The age of this Immigrant.  # noqa: E501
        :type: int
        """
        if age is None:
            raise ValueError("Invalid value for `age`, must not be `None`")  # noqa: E501
        if age is not None and age > 32767:  # noqa: E501
            raise ValueError("Invalid value for `age`, must be a value less than or equal to `32767`")  # noqa: E501
        if age is not None and age < -32768:  # noqa: E501
            raise ValueError("Invalid value for `age`, must be a value greater than or equal to `-32768`")  # noqa: E501

        self._age = age

    @property
    def gender(self):
        """Gets the gender of this Immigrant.  # noqa: E501


        :return: The gender of this Immigrant.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this Immigrant.


        :param gender: The gender of this Immigrant.  # noqa: E501
        :type: str
        """
        if gender is None:
            raise ValueError("Invalid value for `gender`, must not be `None`")  # noqa: E501
        allowed_values = ["male", "female", "others"]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"  # noqa: E501
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def is_location_precise(self):
        """Gets the is_location_precise of this Immigrant.  # noqa: E501


        :return: The is_location_precise of this Immigrant.  # noqa: E501
        :rtype: bool
        """
        return self._is_location_precise

    @is_location_precise.setter
    def is_location_precise(self, is_location_precise):
        """Sets the is_location_precise of this Immigrant.


        :param is_location_precise: The is_location_precise of this Immigrant.  # noqa: E501
        :type: bool
        """
        if is_location_precise is None:
            raise ValueError("Invalid value for `is_location_precise`, must not be `None`")  # noqa: E501

        self._is_location_precise = is_location_precise

    @property
    def point(self):
        """Gets the point of this Immigrant.  # noqa: E501


        :return: The point of this Immigrant.  # noqa: E501
        :rtype: str
        """
        return self._point

    @point.setter
    def point(self, point):
        """Sets the point of this Immigrant.


        :param point: The point of this Immigrant.  # noqa: E501
        :type: str
        """

        self._point = point

    @property
    def is_quarantined(self):
        """Gets the is_quarantined of this Immigrant.  # noqa: E501


        :return: The is_quarantined of this Immigrant.  # noqa: E501
        :rtype: bool
        """
        return self._is_quarantined

    @is_quarantined.setter
    def is_quarantined(self, is_quarantined):
        """Sets the is_quarantined of this Immigrant.


        :param is_quarantined: The is_quarantined of this Immigrant.  # noqa: E501
        :type: bool
        """
        if is_quarantined is None:
            raise ValueError("Invalid value for `is_quarantined`, must not be `None`")  # noqa: E501

        self._is_quarantined = is_quarantined

    @property
    def quarantined_days(self):
        """Gets the quarantined_days of this Immigrant.  # noqa: E501


        :return: The quarantined_days of this Immigrant.  # noqa: E501
        :rtype: int
        """
        return self._quarantined_days

    @quarantined_days.setter
    def quarantined_days(self, quarantined_days):
        """Sets the quarantined_days of this Immigrant.


        :param quarantined_days: The quarantined_days of this Immigrant.  # noqa: E501
        :type: int
        """
        if quarantined_days is not None and quarantined_days > 32767:  # noqa: E501
            raise ValueError("Invalid value for `quarantined_days`, must be a value less than or equal to `32767`")  # noqa: E501
        if quarantined_days is not None and quarantined_days < 0:  # noqa: E501
            raise ValueError("Invalid value for `quarantined_days`, must be a value greater than or equal to `0`")  # noqa: E501

        self._quarantined_days = quarantined_days

    @property
    def quarantined_place(self):
        """Gets the quarantined_place of this Immigrant.  # noqa: E501


        :return: The quarantined_place of this Immigrant.  # noqa: E501
        :rtype: str
        """
        return self._quarantined_place

    @quarantined_place.setter
    def quarantined_place(self, quarantined_place):
        """Sets the quarantined_place of this Immigrant.


        :param quarantined_place: The quarantined_place of this Immigrant.  # noqa: E501
        :type: str
        """
        if quarantined_place is not None and len(quarantined_place) > 128:
            raise ValueError("Invalid value for `quarantined_place`, length must be less than or equal to `128`")  # noqa: E501

        self._quarantined_place = quarantined_place

    @property
    def fever_level(self):
        """Gets the fever_level of this Immigrant.  # noqa: E501


        :return: The fever_level of this Immigrant.  # noqa: E501
        :rtype: str
        """
        return self._fever_level

    @fever_level.setter
    def fever_level(self, fever_level):
        """Sets the fever_level of this Immigrant.


        :param fever_level: The fever_level of this Immigrant.  # noqa: E501
        :type: str
        """
        if fever_level is None:
            raise ValueError("Invalid value for `fever_level`, must not be `None`")  # noqa: E501
        allowed_values = ["96-98.6", "98.6-102", "102+"]  # noqa: E501
        if fever_level not in allowed_values:
            raise ValueError(
                "Invalid value for `fever_level` ({0}), must be one of {1}"  # noqa: E501
                .format(fever_level, allowed_values)
            )

        self._fever_level = fever_level

    @property
    def has_dry_cough(self):
        """Gets the has_dry_cough of this Immigrant.  # noqa: E501


        :return: The has_dry_cough of this Immigrant.  # noqa: E501
        :rtype: bool
        """
        return self._has_dry_cough

    @has_dry_cough.setter
    def has_dry_cough(self, has_dry_cough):
        """Sets the has_dry_cough of this Immigrant.


        :param has_dry_cough: The has_dry_cough of this Immigrant.  # noqa: E501
        :type: bool
        """
        if has_dry_cough is None:
            raise ValueError("Invalid value for `has_dry_cough`, must not be `None`")  # noqa: E501

        self._has_dry_cough = has_dry_cough

    @property
    def has_shortness_of_breath(self):
        """Gets the has_shortness_of_breath of this Immigrant.  # noqa: E501


        :return: The has_shortness_of_breath of this Immigrant.  # noqa: E501
        :rtype: bool
        """
        return self._has_shortness_of_breath

    @has_shortness_of_breath.setter
    def has_shortness_of_breath(self, has_shortness_of_breath):
        """Sets the has_shortness_of_breath of this Immigrant.


        :param has_shortness_of_breath: The has_shortness_of_breath of this Immigrant.  # noqa: E501
        :type: bool
        """
        if has_shortness_of_breath is None:
            raise ValueError("Invalid value for `has_shortness_of_breath`, must not be `None`")  # noqa: E501

        self._has_shortness_of_breath = has_shortness_of_breath

    @property
    def municipality(self):
        """Gets the municipality of this Immigrant.  # noqa: E501


        :return: The municipality of this Immigrant.  # noqa: E501
        :rtype: int
        """
        return self._municipality

    @municipality.setter
    def municipality(self, municipality):
        """Sets the municipality of this Immigrant.


        :param municipality: The municipality of this Immigrant.  # noqa: E501
        :type: int
        """
        if municipality is None:
            raise ValueError("Invalid value for `municipality`, must not be `None`")  # noqa: E501

        self._municipality = municipality

    @property
    def ward(self):
        """Gets the ward of this Immigrant.  # noqa: E501


        :return: The ward of this Immigrant.  # noqa: E501
        :rtype: int
        """
        return self._ward

    @ward.setter
    def ward(self, ward):
        """Sets the ward of this Immigrant.


        :param ward: The ward of this Immigrant.  # noqa: E501
        :type: int
        """

        self._ward = ward

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Immigrant, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Immigrant):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
