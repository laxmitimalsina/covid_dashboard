# coding: utf-8

"""
    BIPAD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Weather(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'created_on': 'datetime',
        'modified_on': 'datetime',
        'location': 'str',
        'point': 'str',
        'minimum_temp': 'float',
        'maximum_temp': 'float',
        'current_temp': 'float',
        'sunrise': 'str',
        'sunset': 'str',
        'humidity': 'float',
        'rainfall': 'str'
    }

    attribute_map = {
        'id': 'id',
        'created_on': 'createdOn',
        'modified_on': 'modifiedOn',
        'location': 'location',
        'point': 'point',
        'minimum_temp': 'minimumTemp',
        'maximum_temp': 'maximumTemp',
        'current_temp': 'currentTemp',
        'sunrise': 'sunrise',
        'sunset': 'sunset',
        'humidity': 'humidity',
        'rainfall': 'rainfall'
    }

    def __init__(self, id=None, created_on=None, modified_on=None, location=None, point=None, minimum_temp=None, maximum_temp=None, current_temp=None, sunrise=None, sunset=None, humidity=None, rainfall=None):  # noqa: E501
        """Weather - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._created_on = None
        self._modified_on = None
        self._location = None
        self._point = None
        self._minimum_temp = None
        self._maximum_temp = None
        self._current_temp = None
        self._sunrise = None
        self._sunset = None
        self._humidity = None
        self._rainfall = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if created_on is not None:
            self.created_on = created_on
        if modified_on is not None:
            self.modified_on = modified_on
        self.location = location
        self.point = point
        if minimum_temp is not None:
            self.minimum_temp = minimum_temp
        if maximum_temp is not None:
            self.maximum_temp = maximum_temp
        if current_temp is not None:
            self.current_temp = current_temp
        if sunrise is not None:
            self.sunrise = sunrise
        if sunset is not None:
            self.sunset = sunset
        if humidity is not None:
            self.humidity = humidity
        if rainfall is not None:
            self.rainfall = rainfall

    @property
    def id(self):
        """Gets the id of this Weather.  # noqa: E501


        :return: The id of this Weather.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Weather.


        :param id: The id of this Weather.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def created_on(self):
        """Gets the created_on of this Weather.  # noqa: E501


        :return: The created_on of this Weather.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this Weather.


        :param created_on: The created_on of this Weather.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def modified_on(self):
        """Gets the modified_on of this Weather.  # noqa: E501


        :return: The modified_on of this Weather.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_on

    @modified_on.setter
    def modified_on(self, modified_on):
        """Sets the modified_on of this Weather.


        :param modified_on: The modified_on of this Weather.  # noqa: E501
        :type: datetime
        """

        self._modified_on = modified_on

    @property
    def location(self):
        """Gets the location of this Weather.  # noqa: E501


        :return: The location of this Weather.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Weather.


        :param location: The location of this Weather.  # noqa: E501
        :type: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501
        if location is not None and len(location) > 255:
            raise ValueError("Invalid value for `location`, length must be less than or equal to `255`")  # noqa: E501
        if location is not None and len(location) < 1:
            raise ValueError("Invalid value for `location`, length must be greater than or equal to `1`")  # noqa: E501

        self._location = location

    @property
    def point(self):
        """Gets the point of this Weather.  # noqa: E501


        :return: The point of this Weather.  # noqa: E501
        :rtype: str
        """
        return self._point

    @point.setter
    def point(self, point):
        """Sets the point of this Weather.


        :param point: The point of this Weather.  # noqa: E501
        :type: str
        """
        if point is None:
            raise ValueError("Invalid value for `point`, must not be `None`")  # noqa: E501

        self._point = point

    @property
    def minimum_temp(self):
        """Gets the minimum_temp of this Weather.  # noqa: E501


        :return: The minimum_temp of this Weather.  # noqa: E501
        :rtype: float
        """
        return self._minimum_temp

    @minimum_temp.setter
    def minimum_temp(self, minimum_temp):
        """Sets the minimum_temp of this Weather.


        :param minimum_temp: The minimum_temp of this Weather.  # noqa: E501
        :type: float
        """

        self._minimum_temp = minimum_temp

    @property
    def maximum_temp(self):
        """Gets the maximum_temp of this Weather.  # noqa: E501


        :return: The maximum_temp of this Weather.  # noqa: E501
        :rtype: float
        """
        return self._maximum_temp

    @maximum_temp.setter
    def maximum_temp(self, maximum_temp):
        """Sets the maximum_temp of this Weather.


        :param maximum_temp: The maximum_temp of this Weather.  # noqa: E501
        :type: float
        """

        self._maximum_temp = maximum_temp

    @property
    def current_temp(self):
        """Gets the current_temp of this Weather.  # noqa: E501


        :return: The current_temp of this Weather.  # noqa: E501
        :rtype: float
        """
        return self._current_temp

    @current_temp.setter
    def current_temp(self, current_temp):
        """Sets the current_temp of this Weather.


        :param current_temp: The current_temp of this Weather.  # noqa: E501
        :type: float
        """

        self._current_temp = current_temp

    @property
    def sunrise(self):
        """Gets the sunrise of this Weather.  # noqa: E501


        :return: The sunrise of this Weather.  # noqa: E501
        :rtype: str
        """
        return self._sunrise

    @sunrise.setter
    def sunrise(self, sunrise):
        """Sets the sunrise of this Weather.


        :param sunrise: The sunrise of this Weather.  # noqa: E501
        :type: str
        """

        self._sunrise = sunrise

    @property
    def sunset(self):
        """Gets the sunset of this Weather.  # noqa: E501


        :return: The sunset of this Weather.  # noqa: E501
        :rtype: str
        """
        return self._sunset

    @sunset.setter
    def sunset(self, sunset):
        """Sets the sunset of this Weather.


        :param sunset: The sunset of this Weather.  # noqa: E501
        :type: str
        """

        self._sunset = sunset

    @property
    def humidity(self):
        """Gets the humidity of this Weather.  # noqa: E501


        :return: The humidity of this Weather.  # noqa: E501
        :rtype: float
        """
        return self._humidity

    @humidity.setter
    def humidity(self, humidity):
        """Sets the humidity of this Weather.


        :param humidity: The humidity of this Weather.  # noqa: E501
        :type: float
        """

        self._humidity = humidity

    @property
    def rainfall(self):
        """Gets the rainfall of this Weather.  # noqa: E501


        :return: The rainfall of this Weather.  # noqa: E501
        :rtype: str
        """
        return self._rainfall

    @rainfall.setter
    def rainfall(self, rainfall):
        """Sets the rainfall of this Weather.


        :param rainfall: The rainfall of this Weather.  # noqa: E501
        :type: str
        """
        if rainfall is not None and len(rainfall) > 25:
            raise ValueError("Invalid value for `rainfall`, length must be less than or equal to `25`")  # noqa: E501

        self._rainfall = rainfall

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Weather, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Weather):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
